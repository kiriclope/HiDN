#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session behavior :kernel dual_data
#  #+PROPERTY: header-args:ipython :results both :exports both :async yes :session /ssh:172.26.20.46:/home/leon/.local/share/jupyter/runtime/kernel-4609abbb-da25-465e-bc86-5b54c62abbfc.json :kernel dual_data

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/dual_task/dual_data/notebooks/setup.py

  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import numpy as np
  import matplotlib.pyplot as plt

  from scipy.io import loadmat
  from src.licks.licks import *
#+end_src

#+RESULTS:

* Licks
** Data

#+begin_src ipython
  # path = '../data/behavior/DualTask_DPA_vs_Single_DPA/'
  path = '../data/behavior/DualTask-Silencing-ACC-Prl/'
  # path = '../data/behavior/DualTask-Silencing-Prl-ACC/'
  # path = '../data/behavior/DualTask-Silencing-ACC/'
#+end_src

#+RESULTS:

** Single Mouse

#+begin_src ipython
  i_mouse = 1
  i_session = 2

  if 'DPA' in path:
      session = 'Dual' # control opto DPA or Dual
  else:
      session = 'control' # control opto DPA or Dual

  data = loadmat(path + session + '_mouse_%d/session_%d' % (i_mouse, i_session))
#+end_src

#+RESULTS:


#+begin_src ipython
  licks_dpa, licks_go, licks_nogo = get_licks_mouse(data, path, response='', trial_length=21, verbose=1)
  licks_all = [np.hstack(licks_dpa), np.hstack(licks_go), np.hstack(licks_nogo)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto')
  # plt.ylim([0, 1])
  plt.savefig('licks_first.svg', dpi=300)
#+end_src

#+RESULTS:
:RESULTS:
: licks: DPA (64, 21) Go (64, 37) NoGo (64, 26)
[[./.ob-jupyter/23d8041a9b2859fdff494d98a6946d6646fc0a12.png]]
:END:

** All mice
**** Control
***** First Sessions

#+begin_src ipython
  mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=0, n_session=3, response="correct")

  n_mice = 9 # 9 control 9 opto
  dpa_all = hstack_with_padding(mice_dpa[:n_mice])
  go_all = hstack_with_padding(mice_go[:n_mice])
  nogo_all = hstack_with_padding(mice_nogo[:n_mice])

  licks_all = [ np.hstack(dpa_all), np.hstack(go_all), np.hstack(nogo_all)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto', n_mice=n_mice)

  plt.title('First Days')
  # plt.ylim([0, 1])
  # plt.yticks([0, 10, 20])

  plt.savefig('licks_first.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
  mouse control_mouse_0
  mouse control_mouse_1
  mouse control_mouse_2
  mouse control_mouse_3
  mouse control_mouse_4
  mouse control_mouse_5
  mouse control_mouse_6
  mouse control_mouse_7
  mouse control_mouse_8
  mouse opto_mouse_0
  mouse opto_mouse_1
  mouse opto_mouse_2
  mouse opto_mouse_3
  mouse opto_mouse_4
  mouse opto_mouse_5
  mouse opto_mouse_6
  mouse opto_mouse_7
  mouse opto_mouse_8
#+end_example
[[file:./.ob-jupyter/706078d060d5e89d64a59a67d3eb92fa1c0e649a.png]]
:END:

***** Middle Sessions
#+begin_src ipython
  mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=4, n_session=6, response="incorrect")

  n_mice = 9
  dpa_all = hstack_with_padding(mice_dpa[:n_mice])
  go_all = hstack_with_padding(mice_go[:n_mice])
  nogo_all = hstack_with_padding(mice_nogo[:n_mice])

  licks_all = [ np.hstack(dpa_all), np.hstack(go_all), np.hstack(nogo_all)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto', n_mice=n_mice)

  plt.title('Middle Days')
  # plt.ylim([0, 1])
  # plt.yticks([0, 10, 20])

  plt.savefig('licks_middle.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
  mouse control_mouse_0
  mouse control_mouse_1
  mouse control_mouse_2
  mouse control_mouse_3
  mouse control_mouse_4
  mouse control_mouse_5
  mouse control_mouse_6
  mouse control_mouse_7
  mouse control_mouse_8
  mouse opto_mouse_0
  mouse opto_mouse_1
  mouse opto_mouse_2
  mouse opto_mouse_3
  mouse opto_mouse_4
  mouse opto_mouse_5
  mouse opto_mouse_6
  mouse opto_mouse_7
  mouse opto_mouse_8
#+end_example
[[file:./.ob-jupyter/eb65a854fe97fe1fc6d65ea951052e295b67b1ad.png]]
:END:

***** Last Sessions
#+begin_src ipython
  mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=7, n_session=10, response="correct")

  n_mice = 9
  dpa_all = hstack_with_padding(mice_dpa[:n_mice])
  go_all = hstack_with_padding(mice_go[:n_mice])
  nogo_all = hstack_with_padding(mice_nogo[:n_mice])

  licks_all = [ np.hstack(dpa_all), np.hstack(go_all), np.hstack(nogo_all)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto', n_mice=n_mice)

  plt.title('Last Days')
  plt.ylim([0, 1])
  # plt.yticks([0, 10, 20])
  plt.savefig('licks_last.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: Cell In[1], line 1
: ----> 1 mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=7, n_session=10, response="correct")
:       3 n_mice = 9
:       4 dpa_all = hstack_with_padding(mice_dpa[:n_mice])
:
: NameError: name 'get_licks_mice' is not defined
:END:

#+begin_src ipython

#+end_src

#+RESULTS:
