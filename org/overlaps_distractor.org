#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dist_overlaps :kernel dual_data :output-dir ./figures/dist_overlaps :file (lc/org-babel-tangle-figure-filename)

* Notebook Settings

#+begin_src ipython
%load_ext autoreload
%autoreload 2
%reload_ext autoreload

%run /home/leon/dual_task/dual_data/notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports

#+begin_src ipython
  from sklearn.exceptions import ConvergenceWarning
  warnings.filterwarnings("ignore")
  import traceback

  import sys
  sys.path.insert(0, '/home/leon/dual_task/dual_data/')

  import os
  if not sys.warnoptions:
    warnings.simplefilter("ignore")
    os.environ["PYTHONWARNINGS"] = "ignore"

  import pickle as pkl
  import numpy as np
  import matplotlib.pyplot as plt
  import pandas as pd
  import seaborn as sns

  from time import perf_counter

  from sklearn.base import clone
  from sklearn.metrics import make_scorer, roc_auc_score
  from sklearn.preprocessing import StandardScaler, RobustScaler
  from sklearn.model_selection import RepeatedStratifiedKFold, LeaveOneOut, StratifiedKFold

  from src.common.plot_utils import add_vlines, add_vdashed
  from src.common.options import set_options
  from src.stats.bootstrap import my_boots_ci
  from src.common.get_data import get_X_y_days, get_X_y_S1_S2
  from src.preprocess.helpers import avg_epochs

  from src.torch.classificationCV import ClassificationCV
  from src.torch.classify import get_classification
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
def pad_with_nans(array, target_shape):
    result = np.full(target_shape, np.nan)  # Create an array filled with NaNs
    print(result.shape)
    slices = tuple(slice(0, min(dim, target)) for dim, target in zip(array.shape, target_shape))
    result[slices] = array[slices]
    return result
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import numpy as np

  def safe_roc_auc_score(y_true, y_score):
      y_true = np.asarray(y_true)
      if len(np.unique(y_true)) == 1:
          return 0.5  # return np.nan where the score cannot be calculated
      return roc_auc_score(y_true, y_score)

  def safe_f1_score(y_true, y_score):
      y_true = np.asarray(y_true)
      if len(np.unique(y_true)) == 1:
          return 0.5  # return np.nan where the score cannot be calculated
      return f1_score(y_true, y_score, average='weighted')
      #+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  def rescale_coefs(model, coefs, bias):

          try:
                  means = model.named_steps["scaler"].mean_
                  scales = model.named_steps["scaler"].scale_

                  # Rescale the coefficients
                  rescaled_coefs = np.true_divide(coefs, scales)

                  # Adjust the intercept
                  rescaled_bias = bias - np.sum(rescaled_coefs * means)

                  return rescaled_coefs, rescaled_bias
          except:
                  return coefs, bias

#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  from scipy.stats import bootstrap

  def get_bootstrap_ci(data, statistic=np.mean, confidence_level=0.95, n_resamples=1000, random_state=None):
      result = bootstrap((data,), statistic)
      ci_lower, ci_upper = result.confidence_interval
      return np.array([ci_lower, ci_upper])
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import pickle as pkl

  def pkl_save(obj, name, path="."):
      os.makedirs(path, exist_ok=True)
      destination = path + "/" + name + ".pkl"
      print("saving to", destination)
      pkl.dump(obj, open(destination, "wb"))


  def pkl_load(name, path="."):
      source = path + "/" + name + '.pkl'
      print('loading from', source)
      return pkl.load(open( source, "rb"))

#+end_src

#+RESULTS:

#+begin_src ipython
def overlaps_scorer(estimator, X_test, y_test, IF_SIGN=0, IF_MEAN=0):
    # print(estimator)
    # try:
    coef = estimator.named_steps["model"].coef_.flatten()
    clf = estimator.named_steps["model"]
    # except:
    # coef = estimator.named_steps["model"].coef_.flatten()
    # bias = estimator.named_steps["model"].intercept_.flatten()
    #     clf = estimator.best_estimator_named_steps["model"]

    norm_w = np.linalg.norm(coef)

    if IF_SIGN:
        # dot_product = (2*y_test -1) * (np.dot(X_test, coef) + bias)
        dot_product = (2*y_test -1) * clf.decision_function(X_test)
    else:
        # dot_product = np.dot(X_test, coef) + bias
        dot_product = clf.decision_function(X_test)

        # if IF_MEAN:
    return np.nanmean(dot_product) / norm_w / coef.shape[0]
    # else:
    # return dot_product / norm_w / coef.shape[0]
#+end_src

#+RESULTS:

* Plots

#+begin_src ipython
def significance_marker(p):
    if p < 0.001:
        return '***'
    elif p < 0.01:
        return '**'
    elif p < 0.05:
        return '*'
    elif p <.1:
        return '.'
    else:
        return ''
#+end_src

#+RESULTS:

#+begin_src ipython
import rpy2.robjects as robjects
from rpy2.robjects.packages import importr

# Set the .libPaths in R
custom_r_libpath = '~/R/x86_64-pc-linux-gnu-library/4.3/'
robjects.r('.libPaths("{0}")'.format(custom_r_libpath))

from pymer4.models import Lmer
#+end_src

#+RESULTS:
#+begin_example
During startup - Warning messages:
1: package ‘methods’ was built under R version 4.4.2
2: package ‘datasets’ was built under R version 4.4.2
3: package ‘utils’ was built under R version 4.4.2
4: package ‘grDevices’ was built under R version 4.4.2
5: package ‘graphics’ was built under R version 4.4.2
6: package ‘stats’ was built under R version 4.4.2
R[write to console]: In addition:
R[write to console]: Warning message:
R[write to console]: package ‘tools’ was built under R version 4.4.2
#+end_example

#+begin_src ipython
def plot_overlaps(df, day, epoch, ax, title='', y0=0.5, size=84, if_proba=0, ls='-', label=None, colors=None):
    df_ = df[df.day == day].copy()
    if colors is None:
        colors = ['r', 'b', 'g']

    if if_proba:
        mean_overlaps = df_.groupby('tasks')['probas_%s' % epoch].apply(lambda x: np.nanmean(np.stack(x), axis=0))
    else:
        mean_overlaps = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: np.nanmean(np.stack(x), axis=0))

    lower_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 0))
    upper_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 1))

    time_points = np.linspace(0, 14, size)

    for i, task in enumerate(mean_overlaps.index):
        if label is None:
            ax.plot(time_points, mean_overlaps[task], label=f"{task}", color=colors[i], ls=ls)
        else:
            ax.plot(time_points, mean_overlaps[task], label=label, color=colors[i], ls=ls)
            ax.fill_between(time_points, lower_cis[task], upper_cis[task], color=colors[i], alpha=0.1)

    ax.set_xlabel('Time (s)')
    # ax.set_ylabel('%s Overlap' % title)
    add_vlines(ax)
    ax.axhline(y0, ls='--', color='k')
    ax.legend(fontsize=10)

def bootstrap_ci_per_task(x, n_bootstrap, ci_idx):
    stacked = np.stack(x)
    return np.array([bootstrap_ci(stacked[:, i], n_bootstrap)[ci_idx] for i in range(stacked.shape[1])])
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_overlaps(df, day, epoch, ax, y0=0.5, size=84, if_proba=0, cis=None, colors=None, **kwargs):
    df_ = df[df.day == day].copy()
    if colors is None:
        colors = ['r', 'b', 'g']

    if if_proba:
        mean_overlaps = df_.groupby('tasks')['probas_%s' % epoch].apply(lambda x: np.nanmean(np.stack(x), axis=0))
    else:
        mean_overlaps = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: np.nanmean(np.stack(x), axis=0))

    if cis is not None:
        lower_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 0))
        upper_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 1))

    time_points = np.linspace(0, 14, size)

    for i, task in enumerate(mean_overlaps.index):
        if cis is None:
            ax.plot(time_points, mean_overlaps[task], color=colors[i], **kwargs)
        else:
            ax.plot(time_points, mean_overlaps[task], color=colors[i], **kwargs)
            ax.fill_between(time_points, lower_cis[task], upper_cis[task], color=colors[i], alpha=0.1)

    ax.set_xlabel('Time (s)')
    add_vlines(ax)
    ax.axhline(y0, ls='--', color='k')
    ax.legend(fontsize=10)

def bootstrap_ci_per_task(x, n_bootstrap, ci_idx):
    stacked = np.stack(x)
    return np.array([bootstrap_ci(stacked[:, i], n_bootstrap)[ci_idx] for i in range(stacked.shape[1])])
#+end_src

#+RESULTS:

#+begin_src ipython
def bootstrap_ci(data, n_bootstrap=1000, ci=95):
    bootstrapped_means = np.array([np.mean(np.random.choice(data, size=len(data))) for _ in range(n_bootstrap)])
    lower_bound = np.percentile(bootstrapped_means, (100-ci)/2)
    upper_bound = np.percentile(bootstrapped_means, 100 - (100-ci)/2)
    return lower_bound, upper_bound
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_mat(X, ax, vmin=-1, vmax=1):
  im = ax.imshow(
    X,
    interpolation="lanczos",
    origin="lower",
    cmap="jet",
    extent=[0, 14, 0, 14],
    vmin=vmin,
    vmax=vmax,
  )

  add_vdashed(ax)
  ax.set_xlim([2, 12])
  ax.set_xticks([2, 4, 6, 8, 10, 12])
  ax.set_ylim([2, 12])
  ax.set_yticks([2, 4, 6, 8, 10, 12])

  ax.set_xlabel("Testing Time (s)")
  ax.set_ylabel("Training Time (s)")
  return im
#+end_src

#+RESULTS:

#+begin_src ipython
import matplotlib.pyplot as plt

def add_vdashed(ax=None, mouse=""):
    # Define time intervals
    t_STIM = [2, 3]
    t_DIST = [4.5, 5.5]
    t_CUE = [6.5, 7]
    t_TEST = [9, 10]

    # Add vertical dashed lines and text labels for each interval
    if ax is not None:
        # Draw vertical lines
        for t in [t_STIM, t_DIST, t_TEST]:
            ax.axvline(x=t[0], linestyle='--', color='k', lw=2)
            ax.axvline(x=t[1], linestyle='--', color='k', lw=2)

            ax.axhline(y=t[0], linestyle='--', color='k', lw=2)
            ax.axhline(y=t[1], linestyle='--', color='k', lw=2)

        # Add text labels at the middle of each interval
        ax.text((t_STIM[0] + t_STIM[1]) / 2, 12.5, 'STIM', color='black',
                horizontalalignment='center', verticalalignment='center', fontsize=16)
        ax.text((t_DIST[0] + t_DIST[1]) / 2, 12.5, 'DIST', color='black',
                horizontalalignment='center', verticalalignment='center', fontsize=16)
        # ax.text((t_CUE[0] + t_CUE[1]) / 2, 12.5, 'CUE', color='black',
        #         horizontalalignment='center', verticalalignment='center', fontsize=16)
        ax.text((t_TEST[0] + t_TEST[1]) / 2, 12.5, 'TEST', color='black',
                horizontalalignment='center', verticalalignment='center', fontsize=16)

        ax.text(12.5, (t_STIM[0] + t_STIM[1]) / 2, 'STIM', color='black',
                horizontalalignment='center', verticalalignment='center', rotation='vertical',fontsize=16)
        ax.text(12.5, (t_DIST[0] + t_DIST[1]) / 2, 'DIST', color='black',
                horizontalalignment='center', verticalalignment='center', rotation='vertical',fontsize=16)
        # ax.text(12.5, (t_CUE[0] + t_CUE[1]) / 2, 'CUE', color='black',
        #         horizontalalignment='center', verticalalignment='center', rotation='vertical', fontsize=16)
        ax.text(12.5, (t_TEST[0] + t_TEST[1]) / 2, 'TEST', color='black',
                horizontalalignment='center', verticalalignment='center', rotation='vertical', fontsize=16)

#+end_src

#+RESULTS:

#+begin_src ipython
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
def plot_overlaps_mat(df, day, vmin=-1, vmax=1, title=''):
    df_ = df[df.day == day].copy()
    colors = ['r', 'b', 'g']
    time_points = np.linspace(0, 14, 84)

    fig, ax = plt.subplots(1, 3, figsize=(15, 5))
    # fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height))

    for i, task in enumerate(df_.tasks.unique()):
        df_task = df_[df_.tasks==task]
        overlaps = df_task
        overlaps = np.array(df_task['overlaps'].tolist())

        mean_o = np.nanmean(overlaps, axis=0)

        im = plot_mat(mean_o.reshape(84, 84), ax[i], vmin, vmax)

    cax = inset_axes(ax[-1], width="5%", height="100%", loc='center right',
                     bbox_to_anchor=(0.12, 0, 1, 1), bbox_transform=ax[-1].transAxes, borderpad=0)

    # Add colorbar to the new axis
    cbar = fig.colorbar(im, cax=cax)
    cbar.set_label("%s Overlaps" % title)

    plt.subplots_adjust(right=0.85)  # Adjust figure to allocate space

#+end_src

#+RESULTS:

* Parameters

#+begin_src ipython
  DEVICE = 'cuda:0'
  old_mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04']
  Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
  mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18', 'ChRM04', 'ChRM23', 'ACCM03', 'ACCM04']

  tasks = ['DPA', 'DualGo', 'DualNoGo']
  # mice = ['AP02', 'AP12']
  # mice = ['PP09', 'PP17']
  # mice = 'JawsM15'

  kwargs = {
      'mouse': mice[0], 'laser': 0,
      'trials': 'correct', 'reload': 0, 'data_type': 'dF',
      'prescreen': None, 'pval': 0.05,
      'preprocess': False, 'scaler_BL': 'robust',
      'avg_noise':True, 'unit_var_BL': True,
      'random_state': None, 'T_WINDOW': 0.0,
      'l1_ratio': 0.95,
      'n_comp': None, 'scaler': None,
      'bootstrap': 1, 'n_boots': 128,
      'n_splits': 5, 'n_repeats': 16,
      'class_weight': 0,
      'multilabel': 0,
      'mne_estimator':'generalizing', # sliding or generalizing
      'n_jobs': 128,
  }

  kwargs['days'] = ['first', 'middle', 'last']
  kwargs['days'] = ['first', 'last']
  # kwargs['days'] = 'all'
  options = set_options(**kwargs)

  safe_roc_auc = make_scorer(safe_roc_auc_score, needs_proba=True)
  safe_f1 = make_scorer(safe_f1_score, needs_proba=True)

  options['hp_scoring'] = lambda estimator, X_test, y_test: np.abs(overlaps_scorer(estimator, X_test, y_test, IF_SIGN=1))
  # options['hp_scoring'] = 'accuracy'
  options['scoring'] = overlaps_scorer

  dum = 'overlaps_loocv'
 #+end_src

#+RESULTS:

* Decoding vs days

#+begin_src ipython
import sys
sys.path.insert(0, '/home/leon/Dclassify')
from src.classificationCV import ClassificationCV
#+end_src

#+RESULTS:

#+begin_src ipython
from sklearn.linear_model import LogisticRegression
net = LogisticRegression(penalty='l1', solver='liblinear', class_weight='balanced', n_jobs=None)
# net = LogisticRegression(penalty='elasticnet', solver='saga', n_jobs=None, l1_ratio=0.95,  tol=0.001, class_weight='balanced')

params = {'model__C': np.logspace(-2, 2, 10)} # , 'net__l1_ratio': np.linspace(0, 1, 10)}

options['hp_scoring'] = lambda estimator, X_test, y_test: np.abs(overlaps_scorer(estimator, X_test, y_test, IF_SIGN=1, IF_MEAN=1))
options['scoring'] = overlaps_scorer

options['n_jobs'] = -1
options['verbose'] = 0
model = ClassificationCV(net, params, **options)

options['cv'] = LeaveOneOut()
# options['cv'] = 5
#+end_src

#+RESULTS:

#+begin_src ipython
options['verbose'] = 1

options['features'] = 'distractor'
options['epochs'] = ['MD']
options['T_WINDOW'] = 0.0

tasks = ['DPA', 'DualGo', 'DualNoGo']

dfs = []

mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18', 'ChRM04', 'ChRM23', 'ACCM03', 'ACCM04']
# mice = ['JawsM15']
tasks = ['DPA']
#+end_src

#+RESULTS:

#+begin_src ipython
new_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'ChRM23']

options['NEW_DATA'] = 0

for mouse in mice:
    df_mouse = []
    options['mouse'] = mouse
    options = set_options(**options)
    days = options['days']
    print(days)

    if mouse in new_mice:
        options['reload'] = 0
        options['NEW_DATA'] = 1
    else:
        options['reload'] = 0
        options['NEW_DATA'] = 0

    for task in tasks:
        options['task'] = task

        for day in days:
            options['day'] = day

            try:
            # if 1:
                overlaps = get_classification(model, RETURN='df_scores', **options)
                options['reload'] = 0
                df_mouse.append(overlaps)
            except:
                print('#### error #####')
                pass

    df_mouse = pd.concat(df_mouse)
    df_mouse['mouse'] = mouse
    dfs.append(df_mouse)

df_dist = pd.concat(dfs)
print(df_dist.shape)
    #+end_src

#+RESULTS:
#+begin_example
['first', 'last']
Loading files from /home/leon/dual_task/dual_data/data/JawsM01
X_days (768, 184, 84) y_days (768, 12)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (10, 184, 84) X_S2 (96, 184, 84)
X_B (106, 184, 84) y_B (106,) [1.] ['DualGo' 'DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (91, 184, 84) X_S2 (91, 184, 84)
y_labels (182, 13) ['DualGo' 'DualNoGo']
X (182, 184, 84) nans 0.0 y (182,) [0. 1.]
df_A (182, 14) scores (182, 7056) labels (182, 13)
scores_B (106, 84, 84)
df_B (106, 14) scores (106, 7056) labels (106, 13)
df (288, 14)
Loading files from /home/leon/dual_task/dual_data/data/JawsM01
X_days (768, 184, 84) y_days (768, 12)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (1, 184, 84) X_S2 (32, 184, 84)
X_B (33, 184, 84) y_B (33,) [1.] ['DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (32, 184, 84) X_S2 (31, 184, 84)
y_labels (63, 13) ['DualGo' 'DualNoGo']
X (63, 184, 84) nans 0.0 y (63,) [0. 1.]
df_A (63, 14) scores (63, 7056) labels (63, 13)
scores_B (33, 84, 84)
df_B (33, 14) scores (33, 7056) labels (33, 13)
df (96, 14)
['first', 'last']
Loading files from /home/leon/dual_task/dual_data/data/JawsM06
X_days (1152, 201, 84) y_days (1152, 12)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (24, 201, 84) X_S2 (96, 201, 84)
X_B (120, 201, 84) y_B (120,) [1.] ['DualNoGo' 'DualGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (80, 201, 84) X_S2 (88, 201, 84)
y_labels (168, 13) ['DualGo' 'DualNoGo']
X (168, 201, 84) nans 0.0 y (168,) [0. 1.]
df_A (168, 14) scores (168, 7056) labels (168, 13)
scores_B (120, 84, 84)
df_B (120, 14) scores (120, 7056) labels (120, 13)
df (288, 14)
Loading files from /home/leon/dual_task/dual_data/data/JawsM06
X_days (1152, 201, 84) y_days (1152, 12)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (43, 201, 84) X_S2 (96, 201, 84)
X_B (139, 201, 84) y_B (139,) [1.] ['DualGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (53, 201, 84) X_S2 (96, 201, 84)
y_labels (149, 13) ['DualGo' 'DualNoGo']
X (149, 201, 84) nans 0.0 y (149,) [0. 1.]
df_A (149, 14) scores (149, 7056) labels (149, 13)
scores_B (139, 84, 84)
df_B (139, 14) scores (139, 7056) labels (139, 13)
df (288, 14)
['first', 'last']
Loading files from /home/leon/dual_task/dual_data/data/JawsM12
X_days (960, 423, 84) y_days (960, 12)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (40, 423, 84) X_S2 (96, 423, 84)
X_B (136, 423, 84) y_B (136,) [1.] ['DualGo' 'DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (61, 423, 84) X_S2 (91, 423, 84)
y_labels (152, 13) ['DualGo' 'DualNoGo']
X (152, 423, 84) nans 0.0 y (152,) [0. 1.]
df_A (152, 14) scores (152, 7056) labels (152, 13)
scores_B (136, 84, 84)
df_B (136, 14) scores (136, 7056) labels (136, 13)
df (288, 14)
Loading files from /home/leon/dual_task/dual_data/data/JawsM12
X_days (960, 423, 84) y_days (960, 12)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (7, 423, 84) X_S2 (64, 423, 84)
X_B (71, 423, 84) y_B (71,) [1.] ['DualGo' 'DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (59, 423, 84) X_S2 (62, 423, 84)
y_labels (121, 13) ['DualGo' 'DualNoGo']
X (121, 423, 84) nans 0.0 y (121,) [0. 1.]
df_A (121, 14) scores (121, 7056) labels (121, 13)
scores_B (71, 84, 84)
df_B (71, 14) scores (71, 7056) labels (71, 13)
df (192, 14)
['first', 'last']
Loading files from /home/leon/dual_task/dual_data/data/JawsM15
X_days (1152, 693, 84) y_days (1152, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (49, 693, 84) X_S2 (96, 693, 84)
X_B (145, 693, 84) y_B (145,) [1.] ['DualGo' 'DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (67, 693, 84) X_S2 (76, 693, 84)
y_labels (143, 15) ['DualGo' 'DualNoGo']
X (143, 693, 84) nans 0.0 y (143,) [0. 1.]
df_A (143, 16) scores (143, 7056) labels (143, 15)
scores_B (145, 84, 84)
df_B (145, 16) scores (145, 7056) labels (145, 15)
df (288, 16)
Loading files from /home/leon/dual_task/dual_data/data/JawsM15
X_days (1152, 693, 84) y_days (1152, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (54, 693, 84) X_S2 (96, 693, 84)
X_B (150, 693, 84) y_B (150,) [1.] ['DualGo' 'DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (48, 693, 84) X_S2 (90, 693, 84)
y_labels (138, 15) ['DualGo' 'DualNoGo']
X (138, 693, 84) nans 0.0 y (138,) [0. 1.]
df_A (138, 16) scores (138, 7056) labels (138, 15)
scores_B (150, 84, 84)
df_B (150, 16) scores (150, 7056) labels (150, 15)
df (288, 16)
['first', 'last']
Loading files from /home/leon/dual_task/dual_data/data/JawsM18
X_days (1152, 444, 84) y_days (1152, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (29, 444, 84) X_S2 (96, 444, 84)
X_B (125, 444, 84) y_B (125,) [1.] ['DualGo' 'DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (89, 444, 84) X_S2 (74, 444, 84)
y_labels (163, 15) ['DualGo' 'DualNoGo']
X (163, 444, 84) nans 0.0 y (163,) [0. 1.]
df_A (163, 16) scores (163, 7056) labels (163, 15)
scores_B (125, 84, 84)
df_B (125, 16) scores (125, 7056) labels (125, 15)
df (288, 16)
Loading files from /home/leon/dual_task/dual_data/data/JawsM18
X_days (1152, 444, 84) y_days (1152, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (6, 444, 84) X_S2 (96, 444, 84)
X_B (102, 444, 84) y_B (102,) [1.] ['DualNoGo' 'DualGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (92, 444, 84) X_S2 (94, 444, 84)
y_labels (186, 15) ['DualGo' 'DualNoGo']
X (186, 444, 84) nans 0.0 y (186,) [0. 1.]
df_A (186, 16) scores (186, 7056) labels (186, 15)
scores_B (102, 84, 84)
df_B (102, 16) scores (102, 7056) labels (102, 15)
df (288, 16)
['first', 'last']
Loading files from /home/leon/dual_task/dual_data/data/ChRM04
X_days (1152, 668, 84) y_days (1152, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (21, 668, 84) X_S2 (96, 668, 84)
X_B (117, 668, 84) y_B (117,) [1.] ['DualNoGo' 'DualGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (89, 668, 84) X_S2 (82, 668, 84)
y_labels (171, 15) ['DualGo' 'DualNoGo']
X (171, 668, 84) nans 0.0 y (171,) [0. 1.]
df_A (171, 16) scores (171, 7056) labels (171, 15)
scores_B (117, 84, 84)
df_B (117, 16) scores (117, 7056) labels (117, 15)
df (288, 16)
Loading files from /home/leon/dual_task/dual_data/data/ChRM04
X_days (1152, 668, 84) y_days (1152, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (27, 668, 84) X_S2 (96, 668, 84)
X_B (123, 668, 84) y_B (123,) [1.] ['DualGo' 'DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (75, 668, 84) X_S2 (90, 668, 84)
y_labels (165, 15) ['DualGo' 'DualNoGo']
X (165, 668, 84) nans 0.0 y (165,) [0. 1.]
df_A (165, 16) scores (165, 7056) labels (165, 15)
scores_B (123, 84, 84)
df_B (123, 16) scores (123, 7056) labels (123, 15)
df (288, 16)
['first', 'last']
Loading files from /home/leon/dual_task/dual_data/data/ChRM23
X_days (960, 232, 84) y_days (960, 12)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (58, 232, 84) X_S2 (96, 232, 84)
X_B (154, 232, 84) y_B (154,) [1.] ['DualGo' 'DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (61, 232, 84) X_S2 (73, 232, 84)
y_labels (134, 13) ['DualGo' 'DualNoGo']
X (134, 232, 84) nans 0.0 y (134,) [0. 1.]
df_A (134, 14) scores (134, 7056) labels (134, 13)
scores_B (154, 84, 84)
df_B (154, 14) scores (154, 7056) labels (154, 13)
df (288, 14)
Loading files from /home/leon/dual_task/dual_data/data/ChRM23
X_days (960, 232, 84) y_days (960, 12)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (23, 232, 84) X_S2 (64, 232, 84)
X_B (87, 232, 84) y_B (87,) [1.] ['DualNoGo' 'DualGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (47, 232, 84) X_S2 (58, 232, 84)
y_labels (105, 13) ['DualGo' 'DualNoGo']
X (105, 232, 84) nans 0.0 y (105,) [0. 1.]
df_A (105, 14) scores (105, 7056) labels (105, 13)
scores_B (87, 84, 84)
df_B (87, 14) scores (87, 7056) labels (87, 13)
df (192, 14)
['first', 'last']
Loading files from /home/leon/dual_task/dual_data/data/ACCM03
X_days (960, 361, 84) y_days (960, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (118, 361, 84) X_S2 (192, 361, 84)
X_B (310, 361, 84) y_B (310,) [1.] ['DualGo' 'DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (108, 361, 84) X_S2 (158, 361, 84)
y_labels (266, 15) ['DualGo' 'DualNoGo']
X (266, 361, 84) nans 0.0 y (266,) [0. 1.]
df_A (266, 16) scores (266, 7056) labels (266, 15)
scores_B (310, 84, 84)
df_B (310, 16) scores (310, 7056) labels (310, 15)
df (576, 16)
Loading files from /home/leon/dual_task/dual_data/data/ACCM03
X_days (960, 361, 84) y_days (960, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (33, 361, 84) X_S2 (128, 361, 84)
X_B (161, 361, 84) y_B (161,) [1.] ['DualNoGo' 'DualGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (115, 361, 84) X_S2 (108, 361, 84)
y_labels (223, 15) ['DualGo' 'DualNoGo']
X (223, 361, 84) nans 0.0 y (223,) [0. 1.]
df_A (223, 16) scores (223, 7056) labels (223, 15)
scores_B (161, 84, 84)
df_B (161, 16) scores (161, 7056) labels (161, 15)
df (384, 16)
['first', 'last']
Loading files from /home/leon/dual_task/dual_data/data/ACCM04
X_days (960, 113, 84) y_days (960, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (150, 113, 84) X_S2 (192, 113, 84)
X_B (342, 113, 84) y_B (342,) [1.] ['DualNoGo' 'DualGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (169, 113, 84) X_S2 (65, 113, 84)
y_labels (234, 15) ['DualGo' 'DualNoGo']
X (234, 113, 84) nans 0.0 y (234,) [0. 1.]
df_A (234, 16) scores (234, 7056) labels (234, 15)
scores_B (342, 84, 84)
df_B (342, 16) scores (342, 7056) labels (342, 15)
df (576, 16)
Loading files from /home/leon/dual_task/dual_data/data/ACCM04
X_days (960, 113, 84) y_days (960, 14)
DATA: FEATURES distractor TASK DPA TRIALS incorrect DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (23, 113, 84) X_S2 (128, 113, 84)
X_B (151, 113, 84) y_B (151,) [1.] ['DualNoGo' 'DPA'] [ 0. nan]
DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
multiple days, discard 0 first 3 middle 0
X_S1 (128, 113, 84) X_S2 (105, 113, 84)
y_labels (233, 15) ['DualGo' 'DualNoGo']
X (233, 113, 84) nans 0.0 y (233,) [0. 1.]
df_A (233, 16) scores (233, 7056) labels (233, 15)
scores_B (151, 84, 84)
df_B (151, 16) scores (151, 7056) labels (151, 15)
df (384, 16)
(5568, 17)
#+end_example

#+begin_src ipython
df_dist['performance'] = df_dist['response'].apply(lambda x: 0 if 'incorrect' in x else 1)
df_dist['pair'] = df_dist['response'].apply(lambda x: 0 if (('rej' in x) or ('fa' in x)) else 1)
 #+end_src

 #+RESULTS:

 #+begin_src ipython
print(len(days))
 #+end_src

#+RESULTS:
: 2

#+begin_src ipython
if len(days)>3:
    name = 'df_dist_%s_days' % dum
elif len(days)==2:
    name = 'df_dist_%s_early_late' % dum
else:
    name = 'df_dist_%s' % dum

if len(mice)==1:
    pkl_save(df_dist, '%s' % name, path="../data/%s/overlaps" % options['mouse'])
elif len(mice)==2:
    pkl_save(df_dist, '%s' % name, path="../data/mice/overlaps_ACC")
else:
    pkl_save(df_dist, '%s' % name, path="../data/mice/overlaps")

#+end_src

#+RESULTS:
: saving to ../data/mice/overlaps/df_dist_overlaps_loocv_early_late.pkl

#+begin_src ipython

#+end_src

#+RESULTS:

* Data

#+begin_src ipython
if len(options['days'])>3:
    name = 'df_dist_%s_days' % dum
elif len(options['days'])==2:
    name = 'df_dist_%s_early_late' % dum
else:
    name = 'df_dist_%s' % dum

if len(mice)==1:
    df_dist = pkl_load('%s' % name, path="/storage/leon/dual_task/data/%s/overlaps" % mice[0])
elif len(mice)==2:
    df_dist = pkl_load('%s' % name, path="/storage/leon/dual_task/data/mice/overlaps_ACC")
else:
    df_dist = pkl_load('%s' % name, path="/storage/leon/dual_task/data/mice/overlaps")#.reset_index()
#+end_src

#+RESULTS:
: loading from /storage/leon/dual_task/data/mice/overlaps/df_dist_overlaps_loocv_early_late.pkl

#+begin_src ipython
print(df_dist.mouse.unique(), df_dist.shape)
#+end_src

#+RESULTS:
: ['JawsM01' 'JawsM06' 'JawsM12' 'JawsM15' 'JawsM18' 'ChRM04' 'ChRM23'
:  'ACCM03' 'ACCM04'] (5568, 17)

#+begin_src ipython
df_dist['overlaps_diag'] = -df_dist['overlaps'].apply(lambda x: np.diag(np.array(x).reshape(84, 84)))
for epoch2 in ['CUE','RWD', 'LD', 'TEST', 'DIST', 'RWD2']:
        options['epochs'] = [epoch2]
        df_dist['overlaps_diag_%s' % epoch2] = df_dist['overlaps_diag'].apply(lambda x: avg_epochs(np.array(x), **options))
# df_dist['overlaps_diag'] = (2.0 * df_dist['dist'] -1 )  * df_dist['overlaps'].apply(lambda x: np.diag(np.array(x).reshape(84, 84)))
#+end_src

#+RESULTS:

#+begin_src ipython
options['T_WINDOW'] = 0.
options = set_options(**options)
for epoch in ['DIST', 'DIST_MD', 'MD', 'CUE', 'RWD' ,'LD', 'TEST', 'CHOICE']:
    options['epochs'] = [epoch]
    df_dist['overlaps_%s' % epoch] = -df_dist['overlaps'].apply(lambda x: avg_epochs(np.array(x).reshape(84, 84).T, **options))

    for epoch2 in ['ED', 'DIST', 'MD', 'CUE', 'RWD', 'LD', 'TEST', 'CHOICE']:
        options['epochs'] = [epoch2]
        df_dist['overlaps_%s_%s' % (epoch, epoch2)] = df_dist['overlaps_%s' % epoch].apply(lambda x: avg_epochs(np.array(x), **options))
#+end_src

#+RESULTS:

 #+begin_src ipython
n_ = len(options['days'])+1
fig, ax = plt.subplots(nrows=1, ncols=n_, figsize=(n_*width, height), sharex=True)

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]
# print(df.mouse.unique(), df.shape)

epoch= 'TEST'

df = df_dist.copy()
# df = df[df.mouse=='JawsM15']

ls = ['-', '--', '--', '-']
colors = ['r', 'b', 'g']
labels = ['AC', 'AD', 'BC', 'BD']

for k in range(3):
    df_ = df[df.tasks==tasks[k]]
    for i in range(2):
        for j in range(2):
            df__ = df_[(df_.performance==1) & (df_.sample_odor==i) & (df_.test_odor==j)]
            plot_overlaps(df__, 'last', epoch, ax[k], y0=0., if_proba=0, label=labels[2*i+j], cis=None, ls=ls[2*i+j], colors=[colors[k]], alpha=(i+1)/2)

    ax[k].set_xlabel('Time (s)')
    ax[k].set_ylabel('GnG Overlap')
    ax[k].set_xlim([0, 12])

ax[-1].legend(fontsize=10)

plt.savefig('figures/icrm/sample_overlaps_corr_incorr_%s.svg' % epoch, dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_30.png]]

 #+begin_src ipython

#+end_src

#+RESULTS:


#+begin_src ipython
df = df_dist.copy()
df = df[df.laser==0]
# df = df[df.dist==1]
df = df[df.mouse=='JawsM15']

df = df[df.day=='middle'].dropna()
sns.lineplot(data=df, x='odr_perf', y='performance', hue='tasks', marker='o', legend=1, palette=['b', 'g'])

plt.xlabel('GNG Trial')
plt.ylabel('DPA Performance')
plt.legend(fontsize=10)
plt.ylim([.5, 1])
plt.xticks([0, 1], ['Incorrect', 'Correct'])
plt.title('Middle')
plt.savefig('figures/icrm/dpa_vs_gng_perf.svg', dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
[[./figures/dist_overlaps/figure_30.png]]
:END:

#+begin_src ipython
df = df_dist.copy()
df = df[df.laser==0]

df = df[df.day=='middle'].dropna()
sns.lineplot(data=df, x='choice', y='overlaps_MD_ED', hue='tasks', marker='o', legend=1, palette=['b', 'g'])

plt.xlabel('DPA Choice')
plt.ylabel('Dist Overlap')
plt.legend(fontsize=10)
plt.xticks([0, 1], ['No Lick', 'Lick'])
plt.title('Middle')
plt.savefig('figures/icrm/lick_vs_gng_perf.svg', dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
[[./figures/dist_overlaps/figure_31.png]]
:END:

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height))

df = df_dist.copy()
df = df[df.laser==0]
# df = df[df.mouse=='JawsM15']
# df = df[df.odr_perf==1]

sns.lineplot(data=df, x='day', y='performance', hue='tasks', marker='o', legend=1, palette=['r', 'b', 'g'], ax=ax[0])

ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_ylim([.475, 1])

df = df_dist.copy()
df = df[df.laser==0].dropna()
# df = df[df.mouse=='JawsM15']

sns.lineplot(data=df, x='day', y='odr_perf', hue='tasks', marker='o', legend=1, palette=['b', 'g'], ax=ax[1])
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('GNG Performance')
ax[1].legend(fontsize=10)

df = df_dist.copy()
df = df[df.laser==0]

sns.lineplot(data=df, x='day', y='overlaps_MD_ED', hue='tasks', marker='o', legend=1, palette=[ 'r', 'b', 'g'], ax=ax[2])

ax[2].axhline(0., ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('Dist Overlap')
ax[2].set_title('Early Delay')
ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/dist_overlaps_LD.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_32.png]]

#+begin_src ipython
import pingouin as pg
df = df_dist.copy()
df = df[df.laser==0]
aov = pg.rm_anova(dv='performance', within=['day', 'tasks'], subject='mouse', data=df, detailed=True)
print(aov)
#+end_src


#+RESULTS:
:         Source        SS  ddof1  ddof2        MS          F     p-unc  \
: 0          day  0.362946      1      8  0.362946  60.537189  0.000053
: 1        tasks  0.013463      2     16  0.006731   3.599392  0.051196
: 2  day * tasks  0.003272      2     16  0.001636   1.299824  0.299862
:
:    p-GG-corr       ng2       eps
: 0   0.000053  0.458885  1.000000
: 1   0.083015  0.030497  0.605474
: 2   0.292772  0.007587  0.606751

#+begin_src ipython
df = df_dist.copy()
df = df[df.laser==0]
# df = df[df.performance==1]
# df = df[df.mouse!='ACCM03']
# df = df[df.tasks!='DualGo']
sns.lineplot(data=df, x='day', y='overlaps_MD_ED', marker='o', legend=0, color='b')
sns.lineplot(data=df, x='day', y='overlaps_MD_ED', hue='mouse', marker='o', legend=0, alpha=.3, errorbar=None)
plt.show()
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_34.png]]


#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height))

df = df_dist.copy()
df = df[df.laser==0]
# df = df[df.mouse=='JawsM15']

sns.lineplot(data=df, x='day', y='performance', hue='tasks', marker='o', legend=1, palette=['b', 'r', 'g'], ax=ax[0])

ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_ylim([.475, 1])

df = df_dist.copy()
df = df[df.laser==0].dropna()
df = df[df.odr_perf==1]

sns.lineplot(data=df, x='day', y='overlaps_MD_ED', hue='tasks', marker='o', legend=1, palette=[ 'b', 'g'], ax=ax[1])
ax[1].axhline(0.0, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('Dist Overlap')
ax[1].set_title('Correct GNG Trials')
ax[1].legend(fontsize=10)

df = df_dist.copy()
df = df[df.laser==0]
df = df[df.odr_perf==0]

sns.lineplot(data=df, x='day', y='overlaps_MD_ED', hue='tasks', marker='o', legend=1, palette=[ 'b', 'g'], ax=ax[2])


ax[2].axhline(0., ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('Dist Overlap')
ax[2].set_title('Incorrect GNG Trials')
ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/dist_gng_overlaps_LD.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_33.png]]

#+begin_src ipython
df = df_dist.copy()
df = df[df.laser==0]
df = df[df.performance==1]
df = df[df.mouse!='JawsM18']
# df = df[df.tasks=='DualGo']

sns.lineplot(data=df, x='day', y='overlaps_MD_ED', marker='o', legend=0, color='b')
sns.lineplot(data=df, x='day', y='overlaps_MD_ED', hue='mouse', marker='o', legend=0, alpha=.3, errorbar=None)
plt.show()
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_34.png]]

#+begin_src ipython
import pingouin as pg
aov = pg.rm_anova(dv='overlaps_MD_ED', within=['day', 'tasks'], subject='mouse', data=df, detailed=True)
print(aov)
#+end_src

#+RESULTS:
:         Source        SS  ddof1  ddof2        MS         F     p-unc  \
: 0          day  0.506749      1      7  0.506749  2.441071  0.162168
: 1        tasks  0.070022      2     14  0.035011  1.555683  0.245416
: 2  day * tasks  0.031644      2     14  0.015822  5.143442  0.021149
:
:    p-GG-corr       ng2       eps
: 0   0.162168  0.046481  1.000000
: 1   0.252148  0.006691  0.692733
: 2   0.035153  0.003035  0.744678

 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True, sharey=True)

df = df_dist.copy()
df = df[df.laser==0]
df = df[df.tasks=='DualGo']

df = df[df.performance==1]
# df = df[df.odr_perf==1]
# df = df[df.mouse=='ACCM03']

epoch= 'MD'

plot_overlaps(df[(df.sample_odor==0) & (df.pair==1)], 'first', epoch, ax[0], title='Sample', y0=0., ls='-')
plot_overlaps(df[(df.sample_odor==0) & (df.pair==0)], 'first', epoch, ax[0], title='Sample', y0=0., ls='--')

plot_overlaps(df[(df.sample_odor==1) & (df.pair==1)], 'first', epoch, ax[0], title='Sample', y0=0., ls='-')
plot_overlaps(df[(df.sample_odor==1) & (df.pair==0)], 'first', epoch, ax[0], title='Sample', y0=0.,ls='--')

plot_overlaps(df[(df.sample_odor==0) & (df.pair==1)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='-')
plot_overlaps(df[(df.sample_odor==0) & (df.pair==0)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='--')

plot_overlaps(df[(df.sample_odor==1) & (df.pair==1)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='-')
plot_overlaps(df[(df.sample_odor==1) & (df.pair==0)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='--')

plot_overlaps(df[(df.sample_odor==1) & (df.pair==1)], 'last', epoch, ax[2], title='Sample', y0=0., ls='-')
plot_overlaps(df[(df.sample_odor==1) & (df.pair==0)], 'last', epoch, ax[2], title='Sample', y0=0., ls='--')

plot_overlaps(df[(df.sample_odor==0) & (df.pair==1)], 'last', epoch, ax[2], title='Sample', y0=0., ls='-')
plot_overlaps(df[(df.sample_odor==0) & (df.pair==0)], 'last', epoch, ax[2], title='Sample', y0=0., ls='--')

ax[0].set_ylabel('GNG Overlap')
ax[0].set_title('First')
ax[1].set_title('Middle')
ax[2].set_title('Last')

# ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/dist_overlaps_%s_pairs.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
[[./figures/dist_overlaps/figure_34.png]]
:END:

#+begin_src ipython
options['days']
#+end_src

#+RESULTS:
| first | last |

 #+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=1, ncols=n_, figsize=(n_*width, height), sharex=True, sharey=True)

df = df_sample.copy()
df = df[df.laser==0]
# df = df[df.performance==1]

epoch= 'MD'

plot_overlaps(df, 'first', epoch, ax[0], title='Sample', y0=0., if_proba=1)
# plot_overlaps(df, 'middle', epoch, ax[1], title='Sample', y0=0., if_abs=0)
plot_overlaps(df, 'last', epoch, ax[n_-1], title='Sample', y0=0., if_proba=1)

ax[0].set_ylabel('Sample Overlap')
ax[0].set_title('First')
ax[1].set_title('Middle')
ax[n_-1].set_title('Last')

# ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/dist_overlaps_%s.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=n_, ncols=3, figsize=(3*width, n_*height))

df = df_dist.copy()
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
df = df[df.performance==1]
# df = df[df.odr_perf==1]

epoch= 'DELAY'
colors = ['r', 'b', 'g']
tasks = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    df_ = df[df.tasks==tasks[i]]
    plot_overlaps(df_[(df_.choice==1)], 'first', epoch, ax[0][i], title='Sample', y0=0., ls='-', label='Lick', colors=[colors[i]])
    plot_overlaps(df_[(df_.choice==0)], 'first', epoch, ax[0][i], title='Sample', y0=0.,ls='--', label='No Lick', colors=[colors[i]])

    plot_overlaps(df_[(df_.choice==1)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='-', label='Lick', colors=[colors[i]])
    plot_overlaps(df_[(df_.choice==0)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='--', label='No Lick', colors=[colors[i]])

    ax[0][i].set_ylabel('GNG Overlap')
    ax[1][i].set_ylabel('GNG Overlap')
    ax[0][i].set_ylim([-2, 2.5])
    ax[1][i].set_ylim([-2, 2.5])
    ax[0][i].set_xlim([0, 14])
    ax[n_-1][i].set_xlim([0, 14])
    ax[0][i].set_xticks(np.arange(0, 16, 2))
    ax[1][i].set_xticks(np.arange(0, 16, 2))

# ax[2].legend(fontsize=10)
plt.savefig('figures/icrm/gng_overlaps_%s_pair_nopair.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_41.png]]

#+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=n_, ncols=3, figsize=(3*width, n_*height))

df = df_dist.copy()
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
df = df[df.performance==1]
# df = df[df.odr_perf==1]

epoch= 'DELAY'
colors = ['r', 'b', 'g']
tasks = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    df_ = df[df.tasks==tasks[i]]
    plot_overlaps(df_[(df_.pair==1)], 'first', epoch, ax[0][i], title='Sample', y0=0., ls='-', label='Pair', colors=[colors[i]])
    plot_overlaps(df_[(df_.pair==0)], 'first', epoch, ax[0][i], title='Sample', y0=0.,ls='--', label='No Pair', colors=[colors[i]])

    plot_overlaps(df_[(df_.pair==1)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='-', label='Pair', colors=[colors[i]])
    plot_overlaps(df_[(df_.pair==0)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='--', label='No Pair', colors=[colors[i]])

    ax[0][i].set_ylabel('GNG Overlap')
    ax[1][i].set_ylabel('GNG Overlap')
    ax[0][i].set_ylim([-2, 2.5])
    ax[1][i].set_ylim([-2, 2.5])
    ax[0][i].set_xlim([0, 14])
    ax[n_-1][i].set_xlim([0, 14])
    ax[0][i].set_xticks(np.arange(0, 16, 2))
    ax[1][i].set_xticks(np.arange(0, 16, 2))

# ax[2].legend(fontsize=10)
plt.savefig('figures/icrm/gng_overlaps_%s_pair_nopair.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_42.png]]

#+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=n_, ncols=3, figsize=(3*width, n_*height))

df = df_dist.copy()
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
# df = df[df.performance==0]
# df = df[df.odr_perf==1]

epoch= 'CUE'
colors = ['r', 'b', 'g']
tasks = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    df_ = df[df.tasks==tasks[i]]
    plot_overlaps(df_[(df_.performance==1)], 'first', epoch, ax[0][i], title='Sample', y0=0., ls='-', label='Correct', colors=[colors[i]])
    plot_overlaps(df_[(df_.performance==0)], 'first', epoch, ax[0][i], title='Sample', y0=0.,ls='--', label='No Correct', colors=[colors[i]])

    plot_overlaps(df_[(df_.performance==1)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='-', label='Correct', colors=[colors[i]])
    plot_overlaps(df_[(df_.performance==0)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='--', label='No Correct', colors=[colors[i]])

    ax[0][i].set_ylabel('GNG Overlap')
    ax[1][i].set_ylabel('GNG Overlap')
    ax[0][i].set_ylim([-2, 2.5])
    ax[1][i].set_ylim([-2, 2.5])
    ax[0][i].set_xlim([0, 14])
    ax[n_-1][i].set_xlim([0, 14])
    ax[0][i].set_xticks(np.arange(0, 16, 2))
    ax[1][i].set_xticks(np.arange(0, 16, 2))

# ax[2].legend(fontsize=10)
plt.savefig('figures/icrm/gng_overlaps_%s_correct_nocorrect.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_43.png]]

#+begin_src ipython

#+end_src


 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True, sharey=True)

df = df_dist.copy()
# df = df[df.laser==1]
# df = df[df.odr_perf==1]
# df = df[df.choice==1]

epoch= 'CUE'

plot_overlaps(df, 'first', epoch, ax[0], title='Dist', y0=0.)
plot_overlaps(df, 'middle', epoch, ax[1], title='Dist', y0=0.)
plot_overlaps(df, 'last', epoch, ax[2], title='Dist', y0=0.)

ax[0].set_ylabel('Dist Overlap')
ax[0].set_title('First')
ax[1].set_title('Middle')
ax[2].set_title('Last')
# ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/dist_overlaps_%s.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
[[./figures/dist_overlaps/figure_36.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:

 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True, sharey=True)

df = df_dist.copy()
df = df[df.laser==0]
# df = df[df.odr_perf==1]
df = df[df.dist==0]
# df = df[df.performance==0]
df = df[df.mouse!='ACCM04']

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]

print(df.mouse.unique(), df.shape)

epoch= 'diag'

plot_overlaps(df, 'first', epoch, ax[0], title='Dist', y0=0.)
plot_overlaps(df, 'middle', epoch, ax[1], title='Dist', y0=0.)
plot_overlaps(df, 'last', epoch, ax[2], title='Dist', y0=0.)

ax[0].set_ylabel('Dist Overlap')
ax[0].set_title('First')
ax[1].set_title('Middle')
ax[2].set_title('Last')

# ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/dist_overlaps_no_lick_%s.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:


 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(2*width, height), sharex=True, sharey=True)

epoch = 'DIST'
df = df_dist.copy()
# df = df[df.performance==0]
df = df[df.odr_perf==1]
df = df[df.response=='incorrect_fa']
df = df[df.mouse!='ACCM04']

plot_overlaps(df, 'first', '%s' % epoch, ax[0], title='Dist', y0=0.)

df = df_dist.copy()
df = df[df.mouse!='ACCM04']
# df = df[df.performance==1]
df = df[df.odr_perf==1]
df = df[df.response=='correct_rej']
plot_overlaps(df, 'first', '%s' % epoch, ax[1], title='Dist', y0=0.)


ax[0].set_ylabel('Dist %s Overlap' % epoch)
ax[0].set_title('Incorrect')
ax[1].set_title('Correct')

# ax[2].legend(fontsize=10)
plt.savefig('figs/dist_%s_overlaps.svg' % epoch, dpi=300)
plt.show()
#+end_src

#+RESULTS:


 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(2*width, height), sharex=True, sharey=True)

epoch = 'DIST'
df = df_dist.copy()
# df = df[df.performance==0]
df = df[df.response=='incorrect_fa']

plot_overlaps(df, 'last', '%s' % epoch, ax[0], title='Dist', y0=0.)

df = df_dist.copy()
# df = df[df.performance==1]
df = df[df.response=='correct_rej']
plot_overlaps(df, 'last', '%s' % epoch, ax[1], title='Dist', y0=0.)


ax[0].set_ylabel('Dist %s Overlap' % epoch)
ax[0].set_title('Incorrect')
ax[1].set_title('Correct')

# ax[2].legend(fontsize=10)
plt.savefig('figs/dist_%s_overlaps.svg' % epoch, dpi=300)
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
Cell In[37], line 8
      5 # df = df[df.performance==0]
      6 df = df[df.response=='incorrect_fa']
----> 8 plot_overlaps(df, 'last', '%s' % epoch, ax[0], title='Dist', y0=0.)
     10 df = df_dist.copy()
     11 # df = df[df.performance==1]

Cell In[12], line 8, in plot_overlaps(df, day, epoch, ax, title, y0, size, if_proba)
      6     mean_overlaps = df_.groupby('tasks')['probas_%s' % epoch].apply(lambda x: np.nanmean(np.stack(x), axis=0))
      7 else:
----> 8     mean_overlaps = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: np.nanmean(np.stack(x), axis=0))
     10 # lower_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 0))
     11 # upper_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 1))
     13 time_points = np.linspace(0, 14, size)

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/pandas/core/groupby/generic.py:1964, in DataFrameGroupBy.__getitem__(self, key)
   1957 if isinstance(key, tuple) and len(key) > 1:
   1958     # if len == 1, then it becomes a SeriesGroupBy and this is actually
   1959     # valid syntax, so don't raise
   1960     raise ValueError(
   1961         "Cannot subset columns with a tuple with more than one element. "
   1962         "Use a list instead."
   1963     )
-> 1964 return super().__getitem__(key)

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/pandas/core/base.py:244, in SelectionMixin.__getitem__(self, key)
    242 else:
    243     if key not in self.obj:
--> 244         raise KeyError(f"Column not found: {key}")
    245     ndim = self.obj[key].ndim
    246     return self._gotitem(key, ndim=ndim)

KeyError: 'Column not found: overlaps_DIST'
#+end_example
[[./figures/dist_overlaps/figure_38.png]]
:END:

 #+begin_src ipython

#+end_src

#+RESULTS:

#+begin_src ipython
df = df_dist.copy()
df = df[df.laser==0]

df = df[df.odr_perf==1]
df = df[df.dist==1]

df = df[df.mouse!='ACCM04']
# df = df[df.response=='incorrect_fa']

plot_overlaps_mat(df, 'first', vmin=0, vmax=1, title='Dist')
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
~/tmp/ipykernel_944958/160763879.py in ?()
      1 df = df_dist.copy()
      2 df = df[df.laser==0]
      3
      4 df = df[df.odr_perf==1]
----> 5 df = df[df.dist==1]
      6
      7 df = df[df.mouse!='ACCM04']
      8 # df = df[df.response=='incorrect_fa']

~/mambaforge/envs/dual_data/lib/python3.11/site-packages/pandas/core/generic.py in ?(self, name)
   6200             and name not in self._accessors
   6201             and self._info_axis._can_hold_identifiers_and_holds_name(name)
   6202         ):
   6203             return self[name]
-> 6204         return object.__getattribute__(self, name)

AttributeError: 'DataFrame' object has no attribute 'dist'
#+end_example
:END:

#+begin_src ipython
df = df_dist.copy()
df = df[df.laser==0]

# df = df[df.odr_perf==1]
# df = df[df.dist==0]

# df = df[df.mouse!='ACCM04']
plot_overlaps_mat(df, 'first', vmin=-1, vmax=1, title='Dist')
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_42.png]]

#+begin_src ipython
df = df_dist.copy()
# df = df[df.response=='incorrect_fa']
plot_overlaps_mat(df, 'last', vmin=-1, vmax=1, title='Dist')
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_42.png]]

#+begin_src ipython
df = df_dist.copy()
df = df[df.response=='correct_rej']
plot_overlaps_mat(df, 'last', vmin=0, vmax=1, title='Dist')
#+end_src

#+RESULTS:
[[./figures/dist_overlaps/figure_43.png]]

#+begin_src ipython

#+end_src

#+RESULTS:
