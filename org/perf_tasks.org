#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session calcium :kernel dual_data

* Notebook Settings

#+begin_src ipython
%load_ext autoreload
%autoreload 2
%reload_ext autoreload

%run /home/leon/dual_task/dual_data/notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
:RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
: <Figure size 700x432.624 with 0 Axes>
:END:

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/dual_task/dual_data/')

  import pickle as pkl
  import numpy as np
  import matplotlib.pyplot as plt
  from scipy.stats import circmean
  from time import perf_counter

  import torch
  import torch.nn as nn
  import torch.optim as optim
  from skorch import NeuralNetClassifier

  from sklearn.base import clone
  from sklearn.model_selection import StratifiedKFold
  from sklearn.model_selection import cross_val_score, cross_validate
  from sklearn.ensemble import BaggingClassifier
  from sklearn.preprocessing import StandardScaler, RobustScaler
  from sklearn.pipeline import Pipeline
  from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, RepeatedStratifiedKFold, StratifiedKFold

  import statsmodels.api as sm
  import statsmodels.formula.api as smf
  import pandas as pd

  from mne.decoding import SlidingEstimator, cross_val_multiscore, GeneralizingEstimator
  from src.decode.my_mne import my_cross_val_multiscore
  from mne.decoding import SlidingEstimator, get_coef

  from src.common.plot_utils import add_vlines, add_vdashed
  from src.attractor.energy import run_energy, plot_energy
  from src.common.options import set_options
  from src.stats.bootstrap import my_boots_ci
  from src.decode.bump import decode_bump, circcvl
  from src.common.get_data import get_X_y_days, get_X_y_S1_S2
  from src.preprocess.helpers import sum_epochs
  from src.licks.licks import add_vlines2
  import torch.optim as optim
  from torch.utils.data import Dataset, TensorDataset, DataLoader
#+end_src

#+RESULTS:

* Helpers
** Statistics
#+begin_src ipython
  from scipy.stats import bootstrap

  def get_bootstrap_ci(data, statistic=np.mean, confidence_level=0.95, n_resamples=1000, random_state=None):
      result = bootstrap((data,), statistic)
      ci_lower, ci_upper = result.confidence_interval
      return ci_lower, ci_upper
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import pickle as pkl

  def pkl_save(obj, name, path="."):
      os.makedirs(path, exist_ok=True)
      destination = path + "/" + name + ".pkl"
      print("saving to", destination)
      pkl.dump(obj, open(destination, "wb"))


  def pkl_load(name, path="."):
      source = path + "/" + name + '.pkl'
      print('loading from', source)
      return pkl.load(open( source, "rb"))

#+end_src

#+RESULTS:

* Performance
** Data

#+begin_src ipython
  DEVICE = 'cuda:0'
  old_mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04']
  Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
  mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18', 'ChRM04', 'ChRM23', 'ACCM03', 'ACCM04']

  tasks = ['DPA', 'DualGo', 'DualNoGo']

  kwargs = {
      'mouse': mice[0], 'laser': 0,
      'trials': '', 'reload': 0, 'data_type': 'dF',
      'prescreen': None, 'pval': 0.05,
      'preprocess': False, 'scaler_BL': 'robust',
      'avg_noise':True, 'unit_var_BL': True,
      'random_state': None, 'T_WINDOW': 0.0,
      'l1_ratio': 0.95,
      'n_comp': None, 'scaler': None,
      'bootstrap': 1, 'n_boots': 128,
      'n_splits': 5, 'n_repeats': 16,
      'class_weight': 0,
      'multilabel': 0,
      'mne_estimator':'generalizing', # sliding or generalizing
      'n_jobs': 128,
  }

  kwargs['days'] = 'all'
  options = set_options(**kwargs)
 #+end_src

#+RESULTS:


#+begin_src ipython
from src.common.get_data import get_X_y_days

y_mice = []
for mouse in mice:
    options['mouse'] = mouse
    X, y = get_X_y_days(**options)
    y['mouse'] = mouse
    y_mice.append(y)

df_all = pd.concat(y_mice)
#+end_src

#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:

** Tasks

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True)

df2 = df_all.copy().reset_index()
df2 = df2[df2.mouse.isin(Jaws_mice)]
df2 = df2[df2.laser==0]

sns.lineplot(data=df2, x='day', y='performance', marker='o', legend=1, color='k', ax=ax[0], label='DPA')
sns.lineplot(data=df2, x='day', y='odr_perf', marker='o', legend=1, color='gray', ax=ax[0], label='GoNoGo')
ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('Performance')
ax[0].legend(fontsize=10)
ax[0].set_xticks(np.arange(1, 7, 1))
ax[0].set_ylim([0.475, 1.0])

sns.lineplot(data=df2, x='day', y='performance', hue='tasks', marker='o', legend=1, palette=['b','r','g'], ax=ax[1], alpha=1)
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('DPA Performance')
ax[1].legend(fontsize=10)
ax[1].set_xticks(np.arange(1, 7, 1))
ax[1].set_ylim([0.475, 1.0])

sns.lineplot(data=df2, x='day', y='odr_perf', hue='tasks', marker='o', legend=1, palette=['b', 'r','g'], ax=ax[2], alpha=1)
ax[2].axhline(0.5, ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('GoNoGo Performance')
ax[2].legend(fontsize=10)
ax[2].set_xticks(np.arange(1, 7, 1))
ax[2].set_ylim([0.475, 1.0])

plt.savefig('./figures/icrm/performance.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/8adb2ca8aa09eafbdd33501c97ed8c9f80d2e007.png]]

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True)

df2 = df_all.copy().reset_index()
df2 = df2[df2.mouse.isin(Jaws_mice)]
# df2 = df2[df2.laser==0]

df_ = df2[df2.tasks=='DPA']
sns.lineplot(data=df_, x='day', y='performance', hue='laser', marker='o', legend=1, palette=['r', 'k'], ax=ax[0])
ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_xticks(np.arange(1, 7, 1))
ax[0].set_ylim([0.475, 1.0])

df_ = df2[df2.tasks=='DualGo']
sns.lineplot(data=df_, x='day', y='performance', hue='laser', marker='o', legend=1, palette=['b', 'k'], ax=ax[1], alpha=1)
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('DPA Performance')
ax[1].legend(fontsize=10)
ax[1].set_xticks(np.arange(1, 7, 1))
ax[1].set_ylim([0.475, 1.0])

df_ = df2[df2.tasks=='DualNoGo']
sns.lineplot(data=df_, x='day', y='performance', hue='laser', marker='o', legend=1, palette=['g', 'k'], ax=ax[2], alpha=1)
ax[2].axhline(0.5, ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('DPA Performance')
ax[2].legend(fontsize=10)
ax[2].set_xticks(np.arange(1, 7, 1))
ax[2].set_ylim([0.475, 1.0])

plt.savefig('./figures/icrm/performance.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/af5c288cf6df83e9295398449bbf18d8fedac58a.png]]

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True)

df2 = df_all.copy().reset_index()
df2 = df2[df2.mouse.isin(Jaws_mice)]
# df2 = df2[df2.laser==0]

df_ = df2[df2.tasks=='DPA']
# sns.lineplot(data=df_, x='day', y='odr_perf', hue='laser', marker='o', legend=1, palette=['r', 'k'], ax=ax[0])
ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('GoNoGo Performance')
ax[0].legend(fontsize=10)
ax[0].set_xticks(np.arange(1, 7, 1))
ax[0].set_ylim([0.475, 1.0])

df_ = df2[df2.tasks=='DualGo']
sns.lineplot(data=df_, x='day', y='odr_perf', hue='laser', marker='o', legend=1, palette=['b', 'k'], ax=ax[1], alpha=1)
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('GoNoGo Performance')
ax[1].legend(fontsize=10)
ax[1].set_xticks(np.arange(1, 7, 1))
ax[1].set_ylim([0.475, 1.0])

df_ = df2[df2.tasks=='DualNoGo']
sns.lineplot(data=df_, x='day', y='odr_perf', hue='laser', marker='o', legend=1, palette=['g', 'k'], ax=ax[2], alpha=1)
ax[2].axhline(0.5, ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('GoNoGo Performance')
ax[2].legend(fontsize=10)
ax[2].set_xticks(np.arange(1, 7, 1))
ax[2].set_ylim([0.475, 1.0])

plt.savefig('./figures/icrm/performance.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
[[./.ob-jupyter/bc807087673811ca45a2c609a19069269340493b.png]]
:END:

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True)

df2 = df_all.copy().reset_index()
df2 = df2[df2.mouse.isin(mice)]
df2 = df2[df2.laser==0]

sns.lineplot(data=df2, x='day', y='licks_ED', marker='o', legend=1, color='k', ax=ax[0])

ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('Lick')
ax[0].legend(fontsize=10)

sns.lineplot(data=df2, x='day', y='licks_RWD', hue='tasks', marker='o', legend=1, palette=['g','b','r'], ax=ax[1], alpha=1)

ax[1].set_xlabel('Day')
ax[1].set_ylabel('Licks ')
ax[1].legend(fontsize=10)

sns.lineplot(data=df2, x='day', y='licks_RWD2', hue='tasks', marker='o', legend=1, palette=['g', 'b','r'], ax=ax[2], alpha=1)

ax[2].set_xlabel('Day')
ax[2].set_ylabel('Lick ')
ax[2].legend(fontsize=10)

plt.savefig('./figures/icrm/performance.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In[44], line 7
      4 df2 = df2[df2.mouse.isin(mice)]
      5 df2 = df2[df2.laser==0]
----> 7 sns.lineplot(data=df2, x='day', y='licks_ED', marker='o', legend=1, color='k', ax=ax[0])
      9 ax[0].axhline(0.5, ls='--', color='k')
     10 ax[0].set_xlabel('Day')

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/seaborn/relational.py:618, in lineplot(data, x, y, hue, size, style, units, palette, hue_order, hue_norm, sizes, size_order, size_norm, dashes, markers, style_order, estimator, errorbar, n_boot, seed, orient, sort, err_style, err_kws, legend, ci, ax, **kwargs)
    615 errorbar = _deprecate_ci(errorbar, ci)
    617 variables = _LinePlotter.get_semantics(locals())
--> 618 p = _LinePlotter(
    619     data=data, variables=variables,
    620     estimator=estimator, n_boot=n_boot, seed=seed, errorbar=errorbar,
    621     sort=sort, orient=orient, err_style=err_style, err_kws=err_kws,
    622     legend=legend,
    623 )
    625 p.map_hue(palette=palette, order=hue_order, norm=hue_norm)
    626 p.map_size(sizes=sizes, order=size_order, norm=size_norm)

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/seaborn/relational.py:365, in _LinePlotter.__init__(self, data, variables, estimator, n_boot, seed, errorbar, sort, orient, err_style, err_kws, legend)
    351 def __init__(
    352     self, *,
    353     data=None, variables={},
   (...)
    359     # the kind of plot to draw, but for the time being we need to set
    360     # this information so the SizeMapping can use it
    361     self._default_size_range = (
    362         np.r_[.5, 2] * mpl.rcParams["lines.linewidth"]
    363     )
--> 365     super().__init__(data=data, variables=variables)
    367     self.estimator = estimator
    368     self.errorbar = errorbar

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/seaborn/_oldcore.py:640, in VectorPlotter.__init__(self, data, variables)
    635 # var_ordered is relevant only for categorical axis variables, and may
    636 # be better handled by an internal axis information object that tracks
    637 # such information and is set up by the scale_* methods. The analogous
    638 # information for numeric axes would be information about log scales.
    639 self._var_ordered = {"x": False, "y": False}  # alt., used DefaultDict
--> 640 self.assign_variables(data, variables)
    642 for var, cls in self._semantic_mappings.items():
    643
    644     # Create the mapping function
    645     map_func = partial(cls.map, plotter=self)

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/seaborn/_oldcore.py:701, in VectorPlotter.assign_variables(self, data, variables)
    699 else:
    700     self.input_format = "long"
--> 701     plot_data, variables = self._assign_variables_longform(
    702         data, **variables,
    703     )
    705 self.plot_data = plot_data
    706 self.variables = variables

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/seaborn/_oldcore.py:938, in VectorPlotter._assign_variables_longform(self, data, **kwargs)
    933 elif isinstance(val, (str, bytes)):
    934
    935     # This looks like a column name but we don't know what it means!
    937     err = f"Could not interpret value `{val}` for parameter `{key}`"
--> 938     raise ValueError(err)
    940 else:
    941
    942     # Otherwise, assume the value is itself data
    943
    944     # Raise when data object is present and a vector can't matched
    945     if isinstance(data, pd.DataFrame) and not isinstance(val, pd.Series):

ValueError: Could not interpret value `licks_ED` for parameter `y`
#+end_example
[[./.ob-jupyter/15a2adc614fe72ea176a1476dbdec26433b6a2dd.png]]
:END:

#+begin_src ipython
def plot_licks(df, day, epoch, ax, title='', y0=0.5, size=84, if_proba=0, ls='-'):
    # df_ = df[df.day == day].copy()
    df_ = df.copy()
    colors = ['r', 'b', 'g']

    mean_overlaps = df_.groupby('tasks')['licks'].apply(lambda x: np.nanmean(np.stack(x), axis=0))

    # lower_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 0))
    # upper_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 1))

    time_points = np.linspace(0, 14, size)

    for i, task in enumerate(mean_overlaps.index):
        ax.plot(time_points, mean_overlaps[task], label=f"{task}", color=colors[i], ls=ls)
        # ax.fill_between(time_points, lower_cis[task], upper_cis[task], color=colors[i], alpha=0.1)

    ax.set_xlabel('Time (s)')
    add_vlines(ax)


def bootstrap_ci_per_task(x, n_bootstrap, ci_idx):
    stacked = np.stack(x)
    return np.array([bootstrap_ci(stacked[:, i], n_bootstrap)[ci_idx] for i in range(stacked.shape[1])])
#+end_src

#+RESULTS:

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True, sharey=True)
plot_licks(df_all, 6, '', ax=ax[0], title='', y0=0.0, size=84, ls='-')
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
Cell In[46], line 2
      1 fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True, sharey=True)
----> 2 plot_licks(df_all, 6, '', ax=ax[0], title='', y0=0.0, size=84, ls='-')

Cell In[45], line 6, in plot_licks(df, day, epoch, ax, title, y0, size, if_proba, ls)
      3 df_ = df.copy()
      4 colors = ['r', 'b', 'g']
----> 6 mean_overlaps = df_.groupby('tasks')['licks'].apply(lambda x: np.nanmean(np.stack(x), axis=0))
      8 # lower_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 0))
      9 # upper_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 1))
     11 time_points = np.linspace(0, 14, size)

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/pandas/core/groupby/generic.py:1964, in DataFrameGroupBy.__getitem__(self, key)
   1957 if isinstance(key, tuple) and len(key) > 1:
   1958     # if len == 1, then it becomes a SeriesGroupBy and this is actually
   1959     # valid syntax, so don't raise
   1960     raise ValueError(
   1961         "Cannot subset columns with a tuple with more than one element. "
   1962         "Use a list instead."
   1963     )
-> 1964 return super().__getitem__(key)

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/pandas/core/base.py:244, in SelectionMixin.__getitem__(self, key)
    242 else:
    243     if key not in self.obj:
--> 244         raise KeyError(f"Column not found: {key}")
    245     ndim = self.obj[key].ndim
    246     return self._gotitem(key, ndim=ndim)

KeyError: 'Column not found: licks'
#+end_example
[[./.ob-jupyter/5e207f92de3df7568ab3d853db9dae704f0cfc3b.png]]
:END:

#+begin_src ipython
df_all.keys()
#+end_src

#+RESULTS:
: Index(['sample_odor', 'dist_odor', 'test_odor', 'tasks', 'response', 'laser',
:        'day', 'choice', 'odr_perf', 'odr_choice', 'odr_response', 'mouse',
:        'performance', 'pair'],
:       dtype='object')

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True)

df2 = df_all.copy().reset_index()
df2 = df2[df2.mouse.isin(mice)]
df2 = df2[df2.laser==0]
df2 = df2[(df2.response=='correct_hit') | (df2.response=='incorrect_miss')]
# df2 = df2[(df2.response==3) | (df2.response==4)]

sns.lineplot(data=df2, x='day', y='performance', marker='o', legend=1, color='k', ax=ax[0], label='DPA')
sns.lineplot(data=df2, x='day', y='odr_perf', marker='o', legend=1, color='gray', ax=ax[0], label='GNG')
ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('Performance')
ax[0].legend(fontsize=10)
ax[0].set_xticks(np.arange(1, 7, 1))
ax[0].set_ylim([0.25, 1.0])

sns.lineplot(data=df2, x='day', y='performance', hue='tasks', marker='o', legend=1, palette=['g','r','b'], ax=ax[1], alpha=1)
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('DPA Performance')
ax[1].legend(fontsize=10)
ax[1].set_xticks(np.arange(1, 7, 1))
ax[1].set_ylim([0.25, 1.0])

sns.lineplot(data=df2, x='day', y='odr_perf', hue='tasks', marker='o', legend=1, palette=['g', 'r','b'], ax=ax[2], alpha=1)
ax[2].axhline(0.5, ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('GNG Performance')
ax[2].legend(fontsize=10)
ax[2].set_xticks(np.arange(1, 7, 1))
ax[2].set_ylim([0.25, 1.0])

plt.savefig('./figures/icrm/performance_pair.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/ca27feed7edcde285bf24fd3bc4917c7a1529537.png]]

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True)

df2 = df_all.copy().reset_index()
df2 = df2[df2.mouse.isin(mice)]
df2 = df2[df2.laser==0]
# df2 = df2[(df2.response==3) | (df2.response==4)]
df2 = df2[(df2.response=='correct_rej') | (df2.response=='incorrect_fa')]

sns.lineplot(data=df2, x='day', y='performance', marker='o', legend=1, color='k', ax=ax[0], label='DPA')
sns.lineplot(data=df2, x='day', y='odr_perf', marker='o', legend=1, color='gray', ax=ax[0], label='GoNoGo')
ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('Correct Rej.')
ax[0].legend(fontsize=10)
ax[0].set_xticks(np.arange(1, 7, 1))
ax[0].set_ylim([0.2, 1.0])

sns.lineplot(data=df2, x='day', y='performance', hue='tasks', marker='o', legend=1, palette=['r','b','g'], ax=ax[1], alpha=1)
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('DPA Correct Rej.')
ax[1].legend(fontsize=10)
ax[1].set_xticks(np.arange(1, 7, 1))
ax[1].set_ylim([0.2, 1.0])

sns.lineplot(data=df2, x='day', y='odr_perf', hue='tasks', marker='o', legend=1, palette=['r','b','g'], ax=ax[2], alpha=1)
ax[2].axhline(0.5, ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('GoNoGo Correct Rej.')
ax[2].legend(fontsize=10)
ax[2].set_xticks(np.arange(1, 7, 1))
ax[2].set_ylim([0.2, 1.0])

plt.savefig('./figures/icrm/performance_unpair.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/e6d5e63e5266a9f486b84583278a84f38b28fc89.png]]

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True)

df2 = df_all.copy().reset_index()
df2 = df2[df2.mouse.isin(mice)]
df2 = df2[df2.laser==0]

df3 = df2.copy()

df2 = df2[(df2.odr_perf==1)]
df3 = df3[(df3.odr_perf==0)]

sns.lineplot(data=df2, x='day', y='performance', marker='o', legend=1, color='k', ax=ax[0], label='GNG correct')
sns.lineplot(data=df3, x='day', y='performance', marker='o', legend=1, color='gray', ax=ax[0], label='GNG incorrect')

ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_xticks(np.arange(1, 7, 1))
ax[0].set_ylim([0.475, 1.0])

sns.lineplot(data=df2[df2.tasks=='DualGo'], x='day', y='performance', marker='o', legend=1, color='b', ax=ax[1], alpha=1, label='Go correct')
sns.lineplot(data=df3[df3.tasks=='DualGo'], x='day', y='performance', marker='o', legend=1, color='b', ax=ax[1], alpha=0.5, label='Go incorrect')

ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('DPA Performance')
ax[1].legend(fontsize=10)
ax[1].set_xticks(np.arange(1, 7, 1))
ax[1].set_ylim([0.475, 1.0])

sns.lineplot(data=df2[df2.tasks=='DualNoGo'], x='day', y='performance', marker='o', legend=1, color='g', ax=ax[2], alpha=1, label='NoGo correct')
sns.lineplot(data=df3[df3.tasks=='DualNoGo'], x='day', y='performance', marker='o', legend=1, color='g', ax=ax[2], alpha=0.5, label='NoGo incorrect')

ax[2].axhline(0.5, ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('DPA Performance')
ax[2].legend(fontsize=10)
ax[2].set_xticks(np.arange(1, 7, 1))
ax[2].set_ylim([0.475, 1.0])

plt.savefig('./figures/icrm/performance_GNG.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/53f3add9a535d3bc9495336c775fbb8561b896c8.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Opto

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(2*width, height), sharex=True)

df2 = df_all.copy().reset_index()
Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
df2 = df2[df2.mouse.isin(Jaws_mice)]

df2.loc[df2.laser==0, 'laser'] = 'OFF'
df2.loc[df2.laser==1, 'laser'] = 'ON'

sns.lineplot(data=df2, x='day', y='performance', hue='laser', marker='o', legend=1, palette=['k','y'], ax=ax[0])
ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_xticks(np.arange(1, 7, 1))
ax[0].set_ylim([0.475, 1.0])

sns.lineplot(data=df2, x='day', y='odr_perf', hue='laser', marker='o', legend=1, palette=['k', 'y',], ax=ax[1])
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('GNG Performance')
ax[1].legend(fontsize=10)
ax[1].set_xticks(np.arange(1, 7, 1))
ax[1].set_ylim([0.475, 1.0])

plt.savefig('./figures/icrm/performance_opto.svg', dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: /home/leon/tmp/ipykernel_214876/2623650266.py:10: UserWarning: The palette list has more values (2) than needed (1), which may not be intended.
:   sns.lineplot(data=df2, x='day', y='performance', hue='laser', marker='o', legend=1, palette=['k','y'], ax=ax[0])
: /home/leon/tmp/ipykernel_214876/2623650266.py:18: UserWarning: The palette list has more values (2) than needed (1), which may not be intended.
:   sns.lineplot(data=df2, x='day', y='odr_perf', hue='laser', marker='o', legend=1, palette=['k', 'y',], ax=ax[1])
[[./.ob-jupyter/e4f0373fe2d1dd8d7938a2292d22c534da5a3907.png]]
:END:

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(2*width, height), sharex=True)

df2 = df_all.copy().reset_index()
Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
df2 = df2[df2.mouse.isin(Jaws_mice)]
df2 = df2[(df2.response=='correct_hit') | (df2.response=='incorrect_miss')]

df2.loc[df2.laser==0, 'laser'] = 'OFF'
df2.loc[df2.laser==1, 'laser'] = 'ON'

sns.lineplot(data=df2, x='day', y='performance', hue='laser', marker='o', legend=1, palette=['k','y'], ax=ax[0])
ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_xticks(np.arange(1, 7, 1))
ax[0].set_ylim([0.25, 1.0])

sns.lineplot(data=df2, x='day', y='odr_perf', hue='laser', marker='o', legend=1, palette=['k', 'y',], ax=ax[1])
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('GNG Performance')
ax[1].legend(fontsize=10)
ax[1].set_xticks(np.arange(1, 7, 1))
ax[1].set_ylim([0.25, 1.0])

plt.savefig('./figures/icrm/performance_opto_pair.svg', dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: /home/leon/tmp/ipykernel_214876/3753518863.py:11: UserWarning: The palette list has more values (2) than needed (1), which may not be intended.
:   sns.lineplot(data=df2, x='day', y='performance', hue='laser', marker='o', legend=1, palette=['k','y'], ax=ax[0])
: /home/leon/tmp/ipykernel_214876/3753518863.py:19: UserWarning: The palette list has more values (2) than needed (1), which may not be intended.
:   sns.lineplot(data=df2, x='day', y='odr_perf', hue='laser', marker='o', legend=1, palette=['k', 'y',], ax=ax[1])
[[./.ob-jupyter/6b9997c0798d936114b9992146b26a94173d6aa5.png]]
:END:

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(2*width, height), sharex=True)

df2 = df_all.copy().reset_index()
Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
df2 = df2[df2.mouse.isin(Jaws_mice)]
df2 = df2[(df2.response=='correct_rej') | (df2.response=='incorrect_fa')]

df2.loc[df2.laser==0, 'laser'] = 'OFF'
df2.loc[df2.laser==1, 'laser'] = 'ON'

sns.lineplot(data=df2, x='day', y='performance', hue='laser', marker='o', legend=1, palette=['k','y'], ax=ax[0])
ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_xticks(np.arange(1, 7, 1))
ax[0].set_ylim([0.25, 1.0])

sns.lineplot(data=df2, x='day', y='odr_perf', hue='laser', marker='o', legend=1, palette=['k', 'y',], ax=ax[1])
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('GNG Performance')
ax[1].legend(fontsize=10)
ax[1].set_xticks(np.arange(1, 7, 1))
ax[1].set_ylim([0.25, 1.0])

plt.savefig('./figures/icrm/performance_opto_unpair.svg', dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: /home/leon/tmp/ipykernel_214876/3528229132.py:11: UserWarning: The palette list has more values (2) than needed (1), which may not be intended.
:   sns.lineplot(data=df2, x='day', y='performance', hue='laser', marker='o', legend=1, palette=['k','y'], ax=ax[0])
: /home/leon/tmp/ipykernel_214876/3528229132.py:19: UserWarning: The palette list has more values (2) than needed (1), which may not be intended.
:   sns.lineplot(data=df2, x='day', y='odr_perf', hue='laser', marker='o', legend=1, palette=['k', 'y',], ax=ax[1])
[[./.ob-jupyter/81b79cab5e35da31e5518bccd127da968917ea02.png]]
:END:

* GLM
** utils

#+begin_src ipython
import rpy2.robjects as robjects
from rpy2.robjects.packages import importr

# Set the .libPaths in R
custom_r_libpath = '~/R/x86_64-pc-linux-gnu-library/4.3/'
robjects.r('.libPaths("{0}")'.format(custom_r_libpath))

from pymer4.models import Lmer
#+end_src

#+RESULTS:

#+begin_src ipython
def generate_colors(N, cmap_name='viridis'):
    cmap = plt.get_cmap(cmap_name)
    return cmap(np.linspace(0, 1, N))
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_betas(label, feature, intercept, results, random_effects, title, y0=0):

    fig = plt.figure(figsize=(1.5*width, 1.5*height))

    colors = generate_colors(random_effects.shape[0], 'plasma')
    space = np.random.normal(0, .05, random_effects.shape[0])

    keys = []
    if intercept:
        keys .append('(Intercept)')

    for i in feature:
        keys.append(i)

    if len(feature) == 2:
        keys.append(feature[0]+':'+feature[1])

    for i, key in enumerate(keys):

        if key == '(Intercept)':
            try:
                res = results.Estimate['(Intercept)'] + random_effects[key]
            except:
                    pass
        else:
            try:
                res = results.Estimate[key] + random_effects[key]
            except:
                res = np.array(results.Estimate[key]) + np.zeros(random_effects.shape[0])

        mean_value = res.mean()
        std_dev = res.std()

        try:
            if results['P-val'][key]<0.001:
                plt.text(i,   y0, '***', ha='center', va='bottom')
            elif results['P-val'][key]<0.01:
                plt.text(i,   y0, '**', ha='center', va='bottom')
            elif results['P-val'][key]<0.05:
                plt.text(i,   y0, '*', ha='center', va='bottom')
            elif results['P-val'][key]<0.1:
                plt.text(i,   y0, '.', ha='center', va='bottom')
        except:
            pass

        # print(res)
        # Plot individual points
        plt.scatter(i * np.ones(res.shape[0]) + space, res, color=colors)
        # Plot mean and stddev as error bars
        plt.plot(i, mean_value, '_k', ms=20)
        plt.errorbar(i * np.ones(res.shape[0]),
                     [mean_value]*len(res),
                     yerr=[std_dev]*len(res), fmt='-', color='k', capsize=15)

    plt.axhline(y=0, color='black', ls='--')
    plt.xticks(np.arange(len(keys)), keys, rotation=45)

    plt.ylabel('$\\beta_{%s}$' % label)
    # plt.title(title)
    # plt.savefig('beta_response.svg')
    plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
def run_model(data, formula, family='binomial'):

    print(formula)
    model = Lmer(formula=formula, data=data, family=family)
    results = model.fit()
    print(results)
    random_effects = model.ranef

    return results, random_effects
#+end_src

#+RESULTS:

** stats perf

#+begin_src ipython
import statsmodels.api as sm
import statsmodels.formula.api as smf

df2 = df_all.copy()
df2 = df2[df2.laser==0]

# formula = "perf ~ GNG_choice * day"
formula = "perf ~ GNG_perf * day"
model = smf.glm(formula=formula, data=df2, family=sm.families.Binomial())

results = model.fit()
print(results.summary())
#+end_src

#+RESULTS:
#+begin_example
                 Generalized Linear Model Regression Results
==============================================================================
Dep. Variable:                   perf   No. Observations:                 3648
Model:                            GLM   Df Residuals:                     3644
Model Family:                Binomial   Df Model:                            3
Link Function:                  Logit   Scale:                          1.0000
Method:                          IRLS   Log-Likelihood:                -1942.9
Date:                Thu, 16 Jan 2025   Deviance:                       3885.7
Time:                        14:10:02   Pearson chi2:                 3.64e+03
No. Iterations:                     4   Pseudo R-squ. (CS):            0.06171
Covariance Type:            nonrobust
================================================================================
                   coef    std err          z      P>|z|      [0.025      0.975]
--------------------------------------------------------------------------------
Intercept        0.1957      0.168      1.164      0.244      -0.134       0.525
GNG_perf        -0.2964      0.195     -1.519      0.129      -0.679       0.086
day              0.2027      0.057      3.569      0.000       0.091       0.314
GNG_perf:day     0.2149      0.065      3.316      0.001       0.088       0.342
================================================================================
#+end_example

** LMM perf

#+begin_src ipython
formula = "perf ~ GNG_perf * day + (1 + day | mouse)"
# mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
df2 = df_all.copy()
df2 = df2[df2.mouse.isin(mice)]
df2 = df2[df2.laser==0]
results, random_effects = run_model(data=df2.dropna().reset_index(), formula=formula)
#+end_src

#+RESULTS:
#+begin_example
perf ~ GNG_perf * day + (1 + day | mouse)
Linear mixed model fit by maximum likelihood  ['lmerMod']
Formula: perf~GNG_perf*day+(1+day|mouse)

Family: binomial	 Inference: parametric

Number of observations: 3648	 Groups: {'mouse': 9.0}

Log-likelihood: -1888.278 	 AIC: 3790.556

Random effects:

              Name    Var    Std
mouse  (Intercept)  0.131  0.362
mouse          day  0.046  0.214

               IV1  IV2   Corr
mouse  (Intercept)  day -0.532

Fixed effects:

              Estimate  2.5_ci  97.5_ci     SE     OR  OR_2.5_ci  OR_97.5_ci  \
(Intercept)      0.324  -0.109    0.758  0.221  1.383      0.897       2.133
GNG_perf        -0.475  -0.876   -0.074  0.205  0.622      0.417       0.929
day              0.238   0.050    0.425  0.096  1.268      1.052       1.530
GNG_perf:day     0.241   0.108    0.375  0.068  1.273      1.114       1.455

               Prob  Prob_2.5_ci  Prob_97.5_ci  Z-stat  P-val  Sig
(Intercept)   0.580        0.473         0.681   1.466  0.143
GNG_perf      0.384        0.294         0.482  -2.320  0.020    *
day           0.559        0.513         0.605   2.486  0.013    *
GNG_perf:day  0.560        0.527         0.593   3.544  0.000  ***
#+end_example

#+begin_src ipython
plot_betas('perf', ['GNG_perf', 'day'], 1, results, random_effects, title='performance ~ GNG perf. * day', y0=0.75)
#+end_src

#+RESULTS:
[[./.ob-jupyter/d5427b5720416a7a7f9e515627a53d238337b7a2.png]]

** LMM choice

#+begin_src ipython
formula = "choice ~ GNG_choice * day + (1 + day | mouse)"
df2 = df_all.copy()
df2 = df2[df2.mouse.isin(mice)]
df2 = df2[df2.laser==0]
results, random_effects = run_model(data=df2.dropna().reset_index(), formula=formula)
#+end_src

#+RESULTS:
#+begin_example
choice ~ GNG_choice * day + (1 + day | mouse)
Linear mixed model fit by maximum likelihood  ['lmerMod']
Formula: choice~GNG_choice*day+(1+day|mouse)

Family: binomial	 Inference: parametric

Number of observations: 3648	 Groups: {'mouse': 9.0}

Log-likelihood: -2258.226 	 AIC: 4530.452

Random effects:

              Name    Var    Std
mouse  (Intercept)  0.318  0.564
mouse          day  0.017  0.131

               IV1  IV2   Corr
mouse  (Intercept)  day -0.841

Fixed effects:

                Estimate  2.5_ci  97.5_ci     SE     OR  OR_2.5_ci  \
(Intercept)        0.719   0.280    1.157  0.224  2.052      1.323
GNG_choice         1.178   0.816    1.541  0.185  3.249      2.261
day               -0.158  -0.266   -0.050  0.055  0.854      0.766
GNG_choice:day    -0.166  -0.263   -0.069  0.050  0.847      0.768

                OR_97.5_ci   Prob  Prob_2.5_ci  Prob_97.5_ci  Z-stat  P-val  \
(Intercept)          3.181  0.672        0.570         0.761   3.212  0.001
GNG_choice           4.670  0.765        0.693         0.824   6.367  0.000
day                  0.951  0.461        0.434         0.487  -2.875  0.004
GNG_choice:day       0.933  0.459        0.435         0.483  -3.356  0.001

                Sig
(Intercept)      **
GNG_choice      ***
day              **
GNG_choice:day  ***
#+end_example

#+begin_src ipython
plot_betas('choice', ['GNG_choice', 'day'], 1, results, random_effects, title='performance ~ GNG_perf. * day', y0=2)
#+end_src

#+RESULTS:
[[./.ob-jupyter/a6249715cdcc7676160e128a9e3994e1829d0ecc.png]]

#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:

** LMM opto

#+begin_src ipython
formula = "perf ~ laser + (1 | mouse)"
df2 = df_all.copy()
df2 = df2[df2.mouse.isin(Jaws_mice)]
results, random_effects = run_model(data=df2.dropna().reset_index(), formula=formula)
#+end_src

#+RESULTS:
#+begin_example
perf ~ laser + (1 | mouse)
Linear mixed model fit by maximum likelihood  ['lmerMod']
Formula: perf~laser+(1|mouse)

Family: binomial	 Inference: parametric

Number of observations: 3328	 Groups: {'mouse': 5.0}

Log-likelihood: -1713.676 	 AIC: 3433.352

Random effects:

              Name    Var    Std
mouse  (Intercept)  0.191  0.437

No random effect correlations specified

Fixed effects:

             Estimate  2.5_ci  97.5_ci     SE     OR  OR_2.5_ci  OR_97.5_ci  \
(Intercept)     1.259   0.858    1.660  0.205  3.522      2.359       5.258
laser           0.079  -0.087    0.245  0.085  1.082      0.917       1.278

              Prob  Prob_2.5_ci  Prob_97.5_ci  Z-stat  P-val  Sig
(Intercept)  0.779        0.702         0.840   6.156  0.000  ***
laser        0.520        0.478         0.561   0.933  0.351
#+end_example

#+begin_src ipython
plot_betas('perf', ['laser'], 1, results, random_effects, title='', y0=2)
#+end_src

#+RESULTS:
[[./.ob-jupyter/e4b75de5ae326303018dd0354074dc0fd4498c2a.png]]

#+RESULTS:
