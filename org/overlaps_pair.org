#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session pair_overlaps :kernel dual_data :output-dir ./figures/pair_overlaps :file (lc/org-babel-tangle-figure-filename)

* Notebook Settings

#+begin_src ipython
%load_ext autoreload
%autoreload 2
%reload_ext autoreload

%run /home/leon/dual_task/dual_data/notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports

#+begin_src ipython
  from sklearn.exceptions import ConvergenceWarning
  warnings.filterwarnings("ignore")
  import traceback

  import sys
  sys.path.insert(0, '/home/leon/dual_task/dual_data/')

  import os
  if not sys.warnoptions:
    warnings.simplefilter("ignore")
    os.environ["PYTHONWARNINGS"] = "ignore"

  import pickle as pkl
  import numpy as np
  import matplotlib.pyplot as plt
  import pandas as pd
  import seaborn as sns

  from time import perf_counter

  from sklearn.base import clone
  from sklearn.metrics import make_scorer, roc_auc_score
  from sklearn.preprocessing import StandardScaler, RobustScaler
  from sklearn.model_selection import RepeatedStratifiedKFold, LeaveOneOut, StratifiedKFold

  from src.common.plot_utils import add_vlines, add_vdashed
  from src.common.options import set_options
  from src.stats.bootstrap import my_boots_ci
  from src.common.get_data import get_X_y_days, get_X_y_S1_S2
  from src.preprocess.helpers import avg_epochs

  from src.torch.classificationCV import ClassificationCV
  from src.torch.classify import get_classification
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
def pad_with_nans(array, target_shape):
    result = np.full(target_shape, np.nan)  # Create an array filled with NaNs
    print(result.shape)
    slices = tuple(slice(0, min(dim, target)) for dim, target in zip(array.shape, target_shape))
    result[slices] = array[slices]
    return result
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import numpy as np

  def safe_roc_auc_score(y_true, y_score):
      y_true = np.asarray(y_true)
      if len(np.unique(y_true)) == 1:
          return 0.5  # return np.nan where the score cannot be calculated
      return roc_auc_score(y_true, y_score)

  def safe_f1_score(y_true, y_score):
      y_true = np.asarray(y_true)
      if len(np.unique(y_true)) == 1:
          return 0.5  # return np.nan where the score cannot be calculated
      return f1_score(y_true, y_score, average='weighted')
      #+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  def rescale_coefs(model, coefs, bias):

          try:
                  means = model.named_steps["scaler"].mean_
                  scales = model.named_steps["scaler"].scale_

                  # Rescale the coefficients
                  rescaled_coefs = np.true_divide(coefs, scales)

                  # Adjust the intercept
                  rescaled_bias = bias - np.sum(rescaled_coefs * means)

                  return rescaled_coefs, rescaled_bias
          except:
                  return coefs, bias

#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  from scipy.stats import bootstrap

  def get_bootstrap_ci(data, statistic=np.mean, confidence_level=0.95, n_resamples=1000, random_state=None):
      result = bootstrap((data,), statistic)
      ci_lower, ci_upper = result.confidence_interval
      return np.array([ci_lower, ci_upper])
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import pickle as pkl

  def pkl_save(obj, name, path="."):
      os.makedirs(path, exist_ok=True)
      destination = path + "/" + name + ".pkl"
      print("saving to", destination)
      pkl.dump(obj, open(destination, "wb"))


  def pkl_load(name, path="."):
      source = path + "/" + name + '.pkl'
      print('loading from', source)
      return pkl.load(open( source, "rb"))

#+end_src

#+RESULTS:

#+begin_src ipython
def overlaps_scorer(estimator, X_test, y_test, IF_SIGN=0):
    try:
        coef = estimator.named_steps["model"].coef_.flatten()
        clf = estimator.named_steps["model"]
    except:
        coef = estimator.best_estimator_.named_steps["model"].coef_.flatten()
        clf = estimator.best_estimator_named_steps["model"]

    norm_w = np.linalg.norm(coef)

    if IF_SIGN:
        # dot_product = (2*y_test -1) * np.dot(X_test, coef) / (np.linalg.norm(coef) + .00001)
        dot_product = (2*y_test -1) * clf.decision_function(X_test)
    else:
        dot_product = clf.decision_function(X_test)
        # dot_product = -np.dot(X_test, coef) / (np.linalg.norm(coef) + .00001)

    return np.nanmean(dot_product) / coef.shape[0] / norm_w
#+end_src

#+RESULTS:

* Plots

#+begin_src ipython
def significance_marker(p):
    if p < 0.001:
        return '***'
    elif p < 0.01:
        return '**'
    elif p < 0.05:
        return '*'
    elif p <.1:
        return '.'
    else:
        return ''
#+end_src

#+RESULTS:

#+begin_src ipython
import rpy2.robjects as robjects
from rpy2.robjects.packages import importr

# Set the .libPaths in R
custom_r_libpath = '~/R/x86_64-pc-linux-gnu-library/4.3/'
robjects.r('.libPaths("{0}")'.format(custom_r_libpath))

from pymer4.models import Lmer
#+end_src

#+RESULTS:
#+begin_example
During startup - Warning messages:
1: package ‘methods’ was built under R version 4.4.2
2: package ‘datasets’ was built under R version 4.4.2
3: package ‘utils’ was built under R version 4.4.2
4: package ‘grDevices’ was built under R version 4.4.2
5: package ‘graphics’ was built under R version 4.4.2
6: package ‘stats’ was built under R version 4.4.2
R[write to console]: In addition:
R[write to console]: Warning message:
R[write to console]: package ‘tools’ was built under R version 4.4.2
#+end_example

#+begin_src ipython
def plot_overlaps(df, day, epoch, ax, title='', y0=0.5, size=84, if_proba=0, ls='-', label=None, colors=None):
    df_ = df[df.day == day].copy()
    if colors is None:
        colors = ['r', 'b', 'g']

    if if_proba:
        mean_overlaps = df_.groupby('tasks')['probas_%s' % epoch].apply(lambda x: np.nanmean(np.stack(x), axis=0))
    else:
        mean_overlaps = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: np.nanmean(np.stack(x), axis=0))

    lower_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 0))
    upper_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, 1000, 1))

    time_points = np.linspace(0, 14, size)

    for i, task in enumerate(mean_overlaps.index):
        if label is None:
            ax.plot(time_points, mean_overlaps[task], label=f"{task}", color=colors[i], ls=ls)
        else:
            ax.plot(time_points, mean_overlaps[task], label=label, color=colors[i], ls=ls)
            ax.fill_between(time_points, lower_cis[task], upper_cis[task], color=colors[i], alpha=0.1)

    ax.set_xlabel('Time (s)')
    # ax.set_ylabel('%s Overlap' % title)
    add_vlines(ax)
    ax.axhline(y0, ls='--', color='k')
    ax.legend(fontsize=10)

def bootstrap_ci_per_task(x, n_bootstrap, ci_idx):
    stacked = np.stack(x)
    return np.array([bootstrap_ci(stacked[:, i], n_bootstrap)[ci_idx] for i in range(stacked.shape[1])])
#+end_src



#+RESULTS:

#+begin_src ipython
def bootstrap_ci(data, n_bootstrap=1000, ci=95):
    bootstrapped_means = np.array([np.mean(np.random.choice(data, size=len(data))) for _ in range(n_bootstrap)])
    lower_bound = np.percentile(bootstrapped_means, (100-ci)/2)
    upper_bound = np.percentile(bootstrapped_means, 100 - (100-ci)/2)
    return lower_bound, upper_bound
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_mat(X, ax, vmin=-1, vmax=1):
  im = ax.imshow(
    X,
    interpolation="lanczos",
    origin="lower",
    cmap="jet",
    extent=[0, 14, 0, 14],
    vmin=vmin,
    vmax=vmax,
  )

  add_vdashed(ax)
  ax.set_xlim([2, 12])
  ax.set_xticks([2, 4, 6, 8, 10, 12])
  ax.set_ylim([2, 12])
  ax.set_yticks([2, 4, 6, 8, 10, 12])

  ax.set_xlabel("Testing Time (s)")
  ax.set_ylabel("Training Time (s)")
  return im
#+end_src

#+RESULTS:

#+begin_src ipython
import matplotlib.pyplot as plt

def add_vdashed(ax=None, mouse=""):
    # Define time intervals
    t_STIM = [2, 3]
    t_DIST = [4.5, 5.5]
    t_CUE = [6.5, 7]
    t_TEST = [9, 10]

    # Add vertical dashed lines and text labels for each interval
    if ax is not None:
        # Draw vertical lines
        for t in [t_STIM, t_DIST, t_TEST]:
            ax.axvline(x=t[0], linestyle='--', color='k', lw=2)
            ax.axvline(x=t[1], linestyle='--', color='k', lw=2)

            ax.axhline(y=t[0], linestyle='--', color='k', lw=2)
            ax.axhline(y=t[1], linestyle='--', color='k', lw=2)

        # Add text labels at the middle of each interval
        ax.text((t_STIM[0] + t_STIM[1]) / 2, 12.5, 'STIM', color='black',
                horizontalalignment='center', verticalalignment='center', fontsize=16)
        ax.text((t_DIST[0] + t_DIST[1]) / 2, 12.5, 'DIST', color='black',
                horizontalalignment='center', verticalalignment='center', fontsize=16)
        # ax.text((t_CUE[0] + t_CUE[1]) / 2, 12.5, 'CUE', color='black',
        #         horizontalalignment='center', verticalalignment='center', fontsize=16)
        ax.text((t_TEST[0] + t_TEST[1]) / 2, 12.5, 'TEST', color='black',
                horizontalalignment='center', verticalalignment='center', fontsize=16)

        ax.text(12.5, (t_STIM[0] + t_STIM[1]) / 2, 'STIM', color='black',
                horizontalalignment='center', verticalalignment='center', rotation='vertical',fontsize=16)
        ax.text(12.5, (t_DIST[0] + t_DIST[1]) / 2, 'DIST', color='black',
                horizontalalignment='center', verticalalignment='center', rotation='vertical',fontsize=16)
        # ax.text(12.5, (t_CUE[0] + t_CUE[1]) / 2, 'CUE', color='black',
        #         horizontalalignment='center', verticalalignment='center', rotation='vertical', fontsize=16)
        ax.text(12.5, (t_TEST[0] + t_TEST[1]) / 2, 'TEST', color='black',
                horizontalalignment='center', verticalalignment='center', rotation='vertical', fontsize=16)

#+end_src

#+RESULTS:

#+begin_src ipython
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
def plot_overlaps_mat(df, day, vmin=-1, vmax=1, title=''):
    df_ = df[df.day == day].copy()
    colors = ['r', 'b', 'g']
    time_points = np.linspace(0, 14, 84)

    fig, ax = plt.subplots(1, 3, figsize=(15, 5))
    # fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height))

    for i, task in enumerate(df_.tasks.unique()):
        df_task = df_[df_.tasks==task]
        overlaps = df_task
        overlaps = np.array(df_task['overlaps'].tolist())

        mean_o = np.nanmean(overlaps, axis=0)

        im = plot_mat(mean_o.reshape(84, 84), ax[i], vmin, vmax)

    cax = inset_axes(ax[-1], width="5%", height="100%", loc='center right',
                     bbox_to_anchor=(0.12, 0, 1, 1), bbox_transform=ax[-1].transAxes, borderpad=0)

    # Add colorbar to the new axis
    cbar = fig.colorbar(im, cax=cax)
    cbar.set_label("%s Overlaps" % title)

    plt.subplots_adjust(right=0.85)  # Adjust figure to allocate space

#+end_src

#+RESULTS:

* Parameters

#+begin_src ipython
  DEVICE = 'cuda:0'
  old_mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04']
  Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
  mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18', 'ChRM04', 'ChRM23', 'ACCM03', 'ACCM04']

  tasks = ['DPA', 'DualGo', 'DualNoGo']
  # mice = ['AP02', 'AP12']
  # mice = ['PP09', 'PP17']
  # mice = 'JawsM15'

  kwargs = {
      'mouse': mice[0], 'laser': 0,
      'trials': '', 'reload': 0, 'data_type': 'dF',
      'prescreen': None, 'pval': 0.05,
      'preprocess': False, 'scaler_BL': 'robust',
      'avg_noise':True, 'unit_var_BL': True,
      'random_state': None, 'T_WINDOW': 0.0,
      'l1_ratio': 0.95,
      'n_comp': None, 'scaler': None,
      'bootstrap': 1, 'n_boots': 128,
      'n_splits': 5, 'n_repeats': 16,
      'class_weight': 0,
      'multilabel': 0,
      'mne_estimator':'generalizing', # sliding or generalizing
      'n_jobs': 128,
  }

  kwargs['days'] = ['first', 'middle', 'last']
  kwargs['days'] = ['first', 'last']
  # kwargs['days'] = 'all'
  options = set_options(**kwargs)

  safe_roc_auc = make_scorer(safe_roc_auc_score, needs_proba=True)
  safe_f1 = make_scorer(safe_f1_score, needs_proba=True)

  options['hp_scoring'] = lambda estimator, X_test, y_test: np.abs(overlaps_scorer(estimator, X_test, y_test, IF_SIGN=1))
  # options['hp_scoring'] = 'accuracy'
  #   options['scoring'] = options['hp_scoring']

  dum = 'overlaps_loocv'
 #+end_src

#+RESULTS:

* Decoding vs days

#+begin_src ipython
import sys
sys.path.insert(0, '/home/leon/Dclassify')
from src.classificationCV import ClassificationCV
#+end_src

#+RESULTS:

#+begin_src ipython
from sklearn.linear_model import LogisticRegression
net = LogisticRegression(penalty='l1', solver='liblinear', class_weight='balanced', n_jobs=None)
# net = LogisticRegression(penalty='elasticnet', solver='saga', n_jobs=None, l1_ratio=0.95,  tol=0.001, class_weight='balanced')

params = {'model__C': np.logspace(-2, 2, 10)} # , 'net__l1_ratio': np.linspace(0, 1, 10)}

options['hp_scoring'] = lambda estimator, X_test, y_test: np.abs(overlaps_scorer(estimator, X_test, y_test, IF_SIGN=1))
options['scoring'] = overlaps_scorer

options['n_jobs'] = -1
options['verbose'] = 0
model = ClassificationCV(net, params, **options)

options['cv'] = LeaveOneOut()
# options['cv'] = 5
#+end_src

#+RESULTS:

#+begin_src ipython
options['verbose'] = 1

options['features'] = 'pair'
options['epochs'] = ['TEST']
options['T_WINDOW'] = 0.0

dfs = []

mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18', 'ChRM04', 'ChRM23', 'ACCM03', 'ACCM04']
mice = ['JawsM15']

tasks = ['DPA', 'DualGo', 'DualNoGo']
tasks = ['all']
#+end_src

#+RESULTS:

#+begin_src ipython
new_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'ChRM23']
# mice = ['ChRM04', 'ChRM23', 'ACCM03', 'ACCM04']

options['NEW_DATA'] = 0
# mice = ['JawsM15']

for mouse in mice:
    df_mouse = []
    options['mouse'] = mouse
    options = set_options(**options)
    days = options['days']
    print(days)

    if mouse in new_mice:
        options['reload'] = 0
        options['NEW_DATA'] = 1
    else:
        options['reload'] = 0
        options['NEW_DATA'] = 0

    for task in tasks:
        options['task'] = task

        for day in days:
            options['day'] = day

            # try:
            if 0==0:
                overlaps = get_classification(model, RETURN='df_scores', **options)
                options['reload'] = 0
                df_mouse.append(overlaps)
            # except:
            #     pass

    df_mouse = pd.concat(df_mouse)
    df_mouse['mouse'] = mouse
    dfs.append(df_mouse)

df_pair = pd.concat(dfs)
print(df_pair.shape)
    #+end_src

    #+RESULTS:
    #+begin_example
    ['first', 'last']
    Loading files from /home/leon/dual_task/dual_data/data/JawsM15
    X_days (1152, 693, 84) y_days (1152, 14)
    DATA: FEATURES pair TASK all TRIALS  DAYS first LASER 1
    multiple days, discard 0 first 3 middle 0
    X_S1 (144, 693, 84) X_S2 (144, 693, 84)
    X_B (288, 693, 84) nans 0.0 y_B (288,) [0 1] ['DualNoGo' 'DPA' 'DualGo']
    DATA: FEATURES pair TASK all TRIALS  DAYS first LASER 0
    multiple days, discard 0 first 3 middle 0
    X_S1 (144, 693, 84) X_S2 (144, 693, 84)y_labels (288, 15) ['DualGo' 'DPA' 'DualNoGo']
    X (288, 693, 84) nans 0.0 y (288,) [0 1]
    scores (2, 288, 84, 84) -0.12837102846196619
    df_A (288, 16) scores (288, 7056) labels (288, 15)
    scores_B (288, 84, 84)
    df_B (288, 16) scores (288, 7056) labels (288, 15)
    df (576, 16)
    Loading files from /home/leon/dual_task/dual_data/data/JawsM15
    X_days (1152, 693, 84) y_days (1152, 14)
    DATA: FEATURES pair TASK all TRIALS  DAYS last LASER 1
    multiple days, discard 0 first 3 middle 0
    X_S1 (144, 693, 84) X_S2 (144, 693, 84)
    X_B (288, 693, 84) nans 0.0 y_B (288,) [0 1] ['DualNoGo' 'DPA' 'DualGo']
    DATA: FEATURES pair TASK all TRIALS  DAYS last LASER 0
    multiple days, discard 0 first 3 middle 0
    X_S1 (144, 693, 84) X_S2 (144, 693, 84)
    y_labels (288, 15) ['DualGo' 'DualNoGo' 'DPA']
    X (288, 693, 84) nans 0.0 y (288,) [0 1]
    scores (2, 288, 84, 84) -0.03973892248433097
    df_A (288, 16) scores (288, 7056) labels (288, 15)
    scores_B (288, 84, 84)
    df_B (288, 16) scores (288, 7056) labels (288, 15)
    df (576, 16)
    (1152, 17)
    #+end_example

#+begin_src ipython
print(df_pair.mouse.unique())
#+end_src

#+RESULTS:
: ['JawsM15']

#+begin_src ipython
df_pair['performance'] = df_pair['response'].apply(lambda x: 0 if 'incorrect' in x else 1)
df_pair['pair'] = df_pair['response'].apply(lambda x: 0 if (('rej' in x) or ('fa' in x)) else 1)
 #+end_src

 #+RESULTS:

 #+begin_src ipython
print(len(days))
 #+end_src

#+RESULTS:
: 2

#+begin_src ipython
if len(days)>3:
    name = 'df_pair_%s_days' % dum
elif len(days)==2:
    name = 'df_pair_%s_early_late' % dum
else:
    name = 'df_pair_%s' % dum

if len(mice)==1:
    pkl_save(df_pair, '%s' % name, path="../data/%s/overlaps" % options['mouse'])
elif len(mice)==2:
    pkl_save(df_pair, '%s' % name, path="../data/mice/overlaps_ACC")
else:
    pkl_save(df_pair, '%s' % name, path="../data/mice/overlaps")

#+end_src

#+RESULTS:
: saving to ../data/JawsM15/overlaps/df_pair_overlaps_loocv_early_late.pkl

#+begin_src ipython

#+end_src

#+RESULTS:

* Data

#+begin_src ipython
if len(options['days'])>3:
    name = 'df_pair_%s_days' % dum
elif len(options['days'])==2:
    name = 'df_pair_%s_early_late' % dum
else:
    name = 'df_pair_%s' % dum

if len(mice)==1:
    df_pair = pkl_load('%s' % name, path="../data/%s/overlaps" % options['mouse'])
elif len(mice)==2:
    df_pair = pkl_load('%s' % name, path="../data/mice/overlaps_ACC")
else:
    df_pair = pkl_load('%s' % name, path="../data/mice/overlaps")#.reset_index()
#+end_src

#+RESULTS:
: loading from ../data/mice/overlaps/df_pair_overlaps_loocv_early_late.pkl

#+begin_src ipython
print(df_pair.mouse.unique(), df_pair.shape)
#+end_src

#+RESULTS:
: ['JawsM01' 'JawsM06' 'JawsM12' 'JawsM15' 'JawsM18' 'ChRM04' 'ChRM23'
:  'ACCM03' 'ACCM04'] (9216, 53)

#+begin_src ipython
df_pair['overlaps_diag'] = df_pair['overlaps'].apply(lambda x: np.diag(np.array(x).reshape(84, 84)))
for epoch2 in ['RWD', 'LD', 'TEST', 'CHOICE', 'RWD2']:
        options['epochs'] = [epoch2]
        df_pair['overlaps_diag_%s' % epoch2] = df_pair['overlaps_diag'].apply(lambda x: avg_epochs(np.array(x), **options))
# df_pair['overlaps_diag'] = (2.0 * df_pair['pair'] -1 )  * df_pair['overlaps'].apply(lambda x: np.diag(np.array(x).reshape(84, 84)))
#+end_src

#+RESULTS:

#+begin_src ipython
options['T_WINDOW'] = 0.5
for epoch in ['RWD' ,'LD', 'TEST', 'CHOICE', 'RWD2']:
    options['epochs'] = [epoch]
    df_pair['overlaps_%s' % epoch] = df_pair['overlaps'].apply(lambda x: avg_epochs(np.array(x).reshape(84, 84).T, **options))

    for epoch2 in ['RWD', 'LD', 'TEST', 'CHOICE', 'RWD2']:
        options['epochs'] = [epoch2]
        df_pair['overlaps_%s_%s' % (epoch, epoch2)] = df_pair['overlaps_%s' % epoch].apply(lambda x: avg_epochs(np.array(x), **options))
#+end_src

#+RESULTS:

#+begin_src ipython
df = df_pair.copy()
df = df[df.laser==0]
# df = df[df.pair==1]
# df = df[df.mouse!='ACCM04']

df = df[df.day=='middle'].dropna()
sns.lineplot(data=df, x='odr_perf', y='performance', hue='tasks', marker='o', legend=1, palette=['b', 'g'])

plt.xlabel('GNG Trial')
plt.ylabel('DPA Performance')
plt.legend(fontsize=10)
plt.ylim([.5, 1])
plt.xticks([0, 1], ['Incorrect', 'Correct'])
plt.title('Middle')
plt.savefig('figures/icrm/dpa_vs_gng_perf.svg', dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/pair_overlaps/figure_30.png]]

#+begin_src ipython
df = df_pair.copy()
df = df[df.laser==0]
# df = df[df.odr_perf==0]
# df = df[df.mouse!='ACCM04']

df = df[df.day=='middle'].dropna()
sns.lineplot(data=df, x='pair', y='overlaps_diag_LD', hue='tasks', marker='o', legend=1, palette=['b', 'g'])

plt.xlabel('DPA Pair')
plt.ylabel('Pair Overlap')
plt.legend(fontsize=10)
plt.xticks([0, 1], ['No Lick', 'Lick'])
plt.title('Middle')
plt.savefig('figures/icrm/lick_vs_gng_perf.svg', dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/pair_overlaps/figure_31.png]]

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height))

df = df_pair.copy()
df = df[df.laser==0]
# df = df[df.odr_perf==1]
# df = df[df.mouse!='ACCM04']

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]

sns.lineplot(data=df, x='day', y='performance', hue='tasks', marker='o', legend=1, palette=['r', 'b', 'g'], ax=ax[0])

ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_ylim([.475, 1])

df = df_pair.copy()
df = df[df.laser==0].dropna()
# df = df[df.mouse!='ACCM04']

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]
print(df.mouse.unique())

sns.lineplot(data=df, x='day', y='odr_perf', hue='tasks', marker='o', legend=1, palette=['b', 'g'], ax=ax[1])
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('GNG Performance')
ax[1].legend(fontsize=10)

df = df_pair.copy()
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]

sns.lineplot(data=df, x='day', y='overlaps_diag_LD', hue='tasks', marker='o', legend=1, palette=[ 'r', 'b', 'g'], ax=ax[2])

ax[2].axhline(0., ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('Pair Overlap')
ax[2].set_title('Late Delay')
ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/pair_overlaps_LD.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: ['JawsM01' 'JawsM06' 'JawsM12' 'JawsM15' 'JawsM18' 'ChRM04' 'ChRM23'
:  'ACCM03' 'ACCM04']
[[./figures/pair_overlaps/figure_32.png]]
:END:

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height))

df = df_pair.copy()
df = df[df.laser==0]
# df = df[df.pair==1]
# df = df[df.mouse!='ACCM04']
df = df[df.odr_perf==0]

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]

sns.lineplot(data=df, x='day', y='performance', hue='tasks', marker='o', legend=1, palette=['b', 'r', 'g'], ax=ax[0])

ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_ylim([.475, 1])

df = df_pair.copy()
df = df[df.laser==0].dropna()
# df = df[df.mouse!='ACCM04']
df = df[df.odr_perf==1]
df = df[df.pair==1]

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]
# print(df.mouse.unique())

sns.lineplot(data=df, x='day', y='overlaps_diag_LD', hue='tasks', marker='o', legend=1, palette=[ 'b', 'g'], ax=ax[1])
ax[1].axhline(0.0, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('Pair Overlap')
ax[1].set_title('Correct GNG Trials')
ax[1].legend(fontsize=10)

df = df_pair.copy()
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
df = df[df.odr_perf==0]
df = df[df.pair==1]

sns.lineplot(data=df, x='day', y='overlaps_diag_LD', hue='tasks', marker='o', legend=1, palette=[ 'b', 'g'], ax=ax[2])

ax[2].axhline(0., ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('Pair Overlap')
ax[2].set_title('Incorrect GNG Trials')
ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/pair_gng_overlaps_LD.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./figures/pair_overlaps/figure_33.png]]

 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True, sharey=True)

df = df_pair.copy()
df = df[df.laser==0]

# df = df[df.odr_perf==1]
df = df[df.pair==1]
# df = df[df.mouse!='ACCM04']

epoch= 'CHOICE'

plot_overlaps(df, 'first', epoch, ax[0], title='Pair', y0=0.)
plot_overlaps(df, 'middle', epoch, ax[1], title='Pair', y0=0.)
plot_overlaps(df, 'last', epoch, ax[2], title='Pair', y0=0.)

ax[0].set_ylabel('Pair Overlap')
ax[0].set_title('First')
ax[1].set_title('Middle')
ax[2].set_title('Last')

# ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/pair_overlaps_%s.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
[[./figures/pair_overlaps/figure_34.png]]
:END:

 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True, sharey=True)

df = df_pair.copy()
df = df[df.laser==0]
# df = df[df.odr_perf==1]
df = df[df.pair==0]
# df = df[df.performance==0]
# df = df[df.mouse!='ACCM04']

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]

print(df.mouse.unique(), df.shape)

epoch= 'CHOICE'

plot_overlaps(df, 'first', epoch, ax[0], title='Pair', y0=0.)
plot_overlaps(df, 'middle', epoch, ax[1], title='Pair', y0=0.)
plot_overlaps(df, 'last', epoch, ax[2], title='Pair', y0=0.)

ax[0].set_ylabel('Pair Overlap')
ax[0].set_title('First')
ax[1].set_title('Middle')
ax[2].set_title('Last')

# ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/pair_overlaps_no_lick_%s.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: ['JawsM15'] (288, 53)
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
[[./figures/pair_overlaps/figure_35.png]]
:END:

 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(2*width, height), sharex=True, sharey=True)

epoch = 'TEST'
df = df_pair.copy()
# df = df[df.performance==0]
df = df[df.odr_perf==1]
df = df[df.response=='incorrect_fa']
# df = df[df.mouse!='ACCM04']

plot_overlaps(df, 'first', '%s' % epoch, ax[0], title='Pair', y0=0.)

df = df_pair.copy()
# df = df[df.mouse!='ACCM04']
# df = df[df.performance==1]
df = df[df.odr_perf==1]
df = df[df.response=='correct_rej']
plot_overlaps(df, 'first', '%s' % epoch, ax[1], title='Pair', y0=0.)

ax[0].set_ylabel('Pair %s Overlap' % epoch)
ax[0].set_title('Incorrect')
ax[1].set_title('Correct')

# ax[2].legend(fontsize=10)
plt.savefig('figs/pair_%s_overlaps.svg' % epoch, dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./figures/pair_overlaps/figure_36.png]]

 #+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=1, ncols=n_, figsize=(n_*width, height), sharex=True, sharey=True)

df = df_pair.copy()
df = df[df.laser==0]
df = df[df.tasks=='DPA']

# df = df[df.performance==0]
# df = df[df.odr_perf==1]

epoch= 'TEST'

plot_overlaps(df[(df.pair==1)], 'first', epoch, ax[0], title='Sample', y0=0., ls='-', label='Pair Trial', colors=['r'])
plot_overlaps(df[(df.pair==0)], 'first', epoch, ax[0], title='Sample', y0=0.,ls='--', label='No Pair Trial', colors=['r'])

if n_>2:
     plot_overlaps(df[(df.pair==1)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='-', label='Pair Trial', colors=['r'])
     plot_overlaps(df[(df.pair==0)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='--', label='No Pair Trial', colors=['r'])

plot_overlaps(df[(df.pair==1)], 'last', epoch, ax[n_-1], title='Sample', y0=0., ls='-', label='Pair Trial', colors=['r'])
plot_overlaps(df[(df.pair==0)], 'last', epoch, ax[n_-1], title='Sample', y0=0., ls='--', label='No Pair Trial', colors=['r'])

ax[0].set_ylabel('GNG Overlap')
ax[0].set_title('First')
ax[1].set_title('Middle')
ax[n_-1].set_title('Last')
ax[0].set_xlim([2, 12])
ax[n_-1].set_xlim([2, 12])

# ax[2].legend(fontsize=10)
# plt.savefig('figures/icrm/dist_overlaps_%s_dualgo_licks.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/pair_overlaps/figure_37.png]]

 #+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=1, ncols=n_, figsize=(n_*width, height), sharex=True, sharey=True)

df = df_pair.copy()
df = df[df.laser==0]
df = df[df.tasks=='DualGo']

# df = df[df.performance==0]
df = df[df.odr_perf==1]

epoch= 'CHOICE'

plot_overlaps(df[(df.pair==1)], 'first', epoch, ax[0], title='Sample', y0=0., ls='-', label='Pair Trial', colors=['b'])
plot_overlaps(df[(df.pair==0)], 'first', epoch, ax[0], title='Sample', y0=0.,ls='--', label='No Pair Trial', colors=['b'])

if n_>2:
     plot_overlaps(df[(df.pair==1)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='-', label='Pair Trial', colors=['b'])
     plot_overlaps(df[(df.pair==0)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='--', label='No Pair Trial', colors=['b'])

plot_overlaps(df[(df.pair==1)], 'last', epoch, ax[n_-1], title='Sample', y0=0., ls='-', label='Pair Trial', colors=['b'])
plot_overlaps(df[(df.pair==0)], 'last', epoch, ax[n_-1], title='Sample', y0=0., ls='--', label='No Pair Trial', colors=['b'])

ax[0].set_ylabel('GNG Overlap')
ax[0].set_title('First')
ax[1].set_title('Middle')
ax[n_-1].set_title('Last')
ax[0].set_xlim([2, 12])
ax[n_-1].set_xlim([2, 12])

# ax[2].legend(fontsize=10)
# plt.savefig('figures/icrm/dist_overlaps_%s_dualgo_licks.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/pair_overlaps/figure_38.png]]

 #+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=1, ncols=n_, figsize=(n_*width, height), sharex=True, sharey=True)

df = df_pair.copy()
df = df[df.laser==0]
df = df[df.tasks=='DualNoGo']

# df = df[df.performance==0]
df = df[df.odr_perf==1]

epoch= 'PAIR'

plot_overlaps(df[(df.pair==1)], 'first', epoch, ax[0], title='Sample', y0=0., ls='-', label='Pair Trial', colors=['g'])
plot_overlaps(df[(df.pair==0)], 'first', epoch, ax[0], title='Sample', y0=0.,ls='--', label='No Pair Trial', colors=['g'])

if n_>2:
     plot_overlaps(df[(df.pair==1)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='-', label='Pair Trial', colors=['g'])
     plot_overlaps(df[(df.pair==0)], 'middle', epoch, ax[1], title='Sample', y0=0., ls='--', label='No Pair Trial', colors=['g'])

plot_overlaps(df[(df.pair==1)], 'last', epoch, ax[n_-1], title='Sample', y0=0., ls='-', label='Pair Trial', colors=['g'])
plot_overlaps(df[(df.pair==0)], 'last', epoch, ax[n_-1], title='Sample', y0=0., ls='--', label='No Pair Trial', colors=['g'])

ax[0].set_ylabel('GNG Overlap')
ax[0].set_title('First')
ax[1].set_title('Middle')
ax[n_-1].set_title('Last')
ax[0].set_xlim([2, 12])
ax[n_-1].set_xlim([2, 12])

# ax[2].legend(fontsize=10)
# plt.savefig('figures/icrm/dist_overlaps_%s_dualgo_licks.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/pair_overlaps/figure_39.png]]

 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(2*width, height), sharex=True, sharey=True)

epoch = 'PAIR'
df = df_pair.copy()
# df = df[df.performance==0]
df = df[df.response=='incorrect_fa']

plot_overlaps(df, 'last', '%s' % epoch, ax[0], title='Pair', y0=0.)

df = df_pair.copy()
# df = df[df.performance==1]
df = df[df.response=='correct_rej']
plot_overlaps(df, 'last', '%s' % epoch, ax[1], title='Pair', y0=0.)


ax[0].set_ylabel('Pair %s Overlap' % epoch)
ax[0].set_title('Incorrect')
ax[1].set_title('Correct')

# ax[2].legend(fontsize=10)
plt.savefig('figs/pair_%s_overlaps.svg' % epoch, dpi=300)
plt.show()
#+end_src

#+RESULTS:
: df698838-1ac7-44fb-8fd1-46b91c3b87c8

 #+begin_src ipython

#+end_src

#+RESULTS:
: 92e4c242-93a4-45ac-9246-80f36e6eada2

#+begin_src ipython
df = df_pair.copy()
df = df[df.laser==0]

df = df[df.odr_perf==1]
df = df[df.pair==1]

df = df[df.mouse!='ACCM04']
# df = df[df.response=='incorrect_fa']

plot_overlaps_mat(df, 'first', vmin=0, vmax=1, title='Pair')
#+end_src

#+RESULTS:
: 8b86502c-c013-411e-9a04-d2ea4355c848

#+begin_src ipython
df = df_pair.copy()
df = df[df.laser==0]

df = df[df.odr_perf==1]
df = df[df.pair==0]

df = df[df.mouse!='ACCM04']
plot_overlaps_mat(df, 'first', vmin=0, vmax=1, title='Pair')
#+end_src

#+RESULTS:
: adce78f8-de40-4dbe-8692-11308455a5df

#+begin_src ipython
df = df_pair.copy()
df = df[df.response=='incorrect_fa']
plot_overlaps_mat(df, 'last', vmin=0, vmax=1, title='Pair')
#+end_src

#+RESULTS:
: e3e14a9c-27a6-40db-93a6-73bbe8889c5e

#+begin_src ipython
df = df_pair.copy()
df = df[df.response=='correct_rej']
plot_overlaps_mat(df, 'last', vmin=0, vmax=1, title='Pair')
#+end_src

#+RESULTS:
: e44d1a04-97ef-4497-8a09-cca2e6553506

#+begin_src ipython

#+end_src

#+RESULTS:
: c4eb98d7-7fa0-4a43-9a29-53e57be5001d
