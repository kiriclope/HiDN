
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session choice_overlaps :kernel dual_data :output-dir ./figures/choice_overlaps :file (lc/org-babel-tangle-figure-filename)

* Notebook Settings

#+begin_src ipython
%load_ext autoreload
%autoreload 2
%reload_ext autoreload

%run /home/leon/dual_task/dual_data/notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports

#+begin_src ipython
  from sklearn.exceptions import ConvergenceWarning
  warnings.filterwarnings("ignore")
  import traceback

  import sys
  sys.path.insert(0, '/home/leon/dual_task/dual_data/')

  import os
  if not sys.warnoptions:
    warnings.simplefilter("ignore")
    os.environ["PYTHONWARNINGS"] = "ignore"

  import pickle as pkl
  import numpy as np
  import matplotlib.pyplot as plt
  import pandas as pd
  import seaborn as sns

  from time import perf_counter

  from sklearn.base import clone
  from sklearn.metrics import make_scorer, roc_auc_score
  from sklearn.preprocessing import StandardScaler, RobustScaler
  from sklearn.model_selection import RepeatedStratifiedKFold, LeaveOneOut, StratifiedKFold

  from src.common.plot_utils import add_vlines, add_vdashed
  from src.common.options import set_options
  from src.stats.bootstrap import my_boots_ci
  from src.common.get_data import get_X_y_days, get_X_y_S1_S2
  from src.preprocess.helpers import avg_epochs

  from src.torch.classificationCV import ClassificationCV
  from src.torch.classify import get_classification
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
def pad_with_nans(array, target_shape):
    result = np.full(target_shape, np.nan)  # Create an array filled with NaNs
    print(result.shape)
    slices = tuple(slice(0, min(dim, target)) for dim, target in zip(array.shape, target_shape))
    result[slices] = array[slices]
    return result
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import numpy as np

  def safe_roc_auc_score(y_true, y_score):
      y_true = np.asarray(y_true)
      if len(np.unique(y_true)) == 1:
          return 0.5  # return np.nan where the score cannot be calculated
      return roc_auc_score(y_true, y_score)

  def safe_f1_score(y_true, y_score):
      y_true = np.asarray(y_true)
      if len(np.unique(y_true)) == 1:
          return 0.5  # return np.nan where the score cannot be calculated
      return f1_score(y_true, y_score, average='weighted')
      #+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  def rescale_coefs(model, coefs, bias):

          try:
                  means = model.named_steps["scaler"].mean_
                  scales = model.named_steps["scaler"].scale_

                  # Rescale the coefficients
                  rescaled_coefs = np.true_divide(coefs, scales)

                  # Adjust the intercept
                  rescaled_bias = bias - np.sum(rescaled_coefs * means)

                  return rescaled_coefs, rescaled_bias
          except:
                  return coefs, bias

#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  from scipy.stats import bootstrap

  def get_bootstrap_ci(data, statistic=np.mean, confidence_level=0.95, n_resamples=1000, random_state=None):
      result = bootstrap((data,), statistic)
      ci_lower, ci_upper = result.confidence_interval
      return np.array([ci_lower, ci_upper])
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import pickle as pkl

  def pkl_save(obj, name, path="."):
      os.makedirs(path, exist_ok=True)
      destination = path + "/" + name + ".pkl"
      print("saving to", destination)
      pkl.dump(obj, open(destination, "wb"))


  def pkl_load(name, path="."):
      source = path + "/" + name + '.pkl'
      print('loading from', source)
      return pkl.load(open( source, "rb"))

#+end_src

#+RESULTS:

#+begin_src ipython
df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.choice==1]
# df = df[df.mouse!='ACCM04']

df = df[df.day=='middle'].dropna()
sns.lineplot(data=df, x='odr_perf', y='performance', hue='tasks', marker='o', legend=1, palette=['b', 'g'])

plt.xlabel('GNG Trial')
plt.ylabel('DPA Performance')
plt.legend(fontsize=10)
plt.ylim([.5, 1])
plt.xticks([0, 1], ['Incorrect', 'Correct'])
plt.title('Middle')
plt.savefig('figures/icrm/dpa_vs_gng_perf.svg', dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
[[./figures/choice_overlaps/figure_33.png]]
:END:

#+begin_src ipython
df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.odr_perf==0]
# df = df[df.mouse!='ACCM04']

df = df[df.day=='middle'].dropna()
sns.lineplot(data=df, x='choice', y='overlaps_diag_LD', hue='tasks', marker='o', legend=1, palette=['b', 'g'])

plt.xlabel('DPA Choice')
plt.ylabel('Choice Overlap')
plt.legend(fontsize=10)
plt.xticks([0, 1], ['No Lick', 'Lick'])
# plt.title('Middle')
plt.savefig('figures/icrm/lick_vs_gng_perf.svg', dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
[[./figures/choice_overlaps/figure_34.png]]
:END:

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height))

df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.odr_perf==1]
# df = df[df.mouse!='ACCM04']

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]

sns.lineplot(data=df, x='day', y='performance', hue='tasks', marker='o', legend=1, palette=['r', 'b', 'g'], ax=ax[0])

ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_ylim([.475, 1])

df = df_choice.copy()
df = df[df.laser==0].dropna()
# df = df[df.mouse!='ACCM04']

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]
print(df.mouse.unique())

sns.lineplot(data=df, x='day', y='odr_perf', hue='tasks', marker='o', legend=1, palette=['b', 'g'], ax=ax[1])
ax[1].axhline(0.5, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('GNG Performance')
ax[1].legend(fontsize=10)

df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.choice==1]
# df = df[df.mouse!='ACCM04']

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]

sns.lineplot(data=df, x='day', y='overlaps_CHOICE_LD', hue='tasks', marker='o', legend=1, palette=[ 'r', 'b', 'g'], ax=ax[2])

ax[2].axhline(0., ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('Choice Overlap')
# ax[2].set_title('Late Delay')
ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/choice_overlaps_LD.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
: []
[[./figures/choice_overlaps/figure_34.png]]
:END:

#+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height))

df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.choice==1]
# df = df[df.mouse!='ACCM04']
df = df[df.odr_perf==0]

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]

sns.lineplot(data=df, x='day', y='performance', hue='tasks', marker='o', legend=1, palette=['b', 'r', 'g'], ax=ax[0])

ax[0].axhline(0.5, ls='--', color='k')
ax[0].set_xlabel('Day')
ax[0].set_ylabel('DPA Performance')
ax[0].legend(fontsize=10)
ax[0].set_ylim([.475, 1])

df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
df = df[df.odr_perf==1]
df = df[df.choice==1]

# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]
# print(df.mouse.unique())

sns.lineplot(data=df, x='day', y='overlaps_diag_LD', hue='tasks', marker='o', legend=1, palette=[ 'b', 'g'], ax=ax[1])
ax[1].axhline(0.0, ls='--', color='k')
ax[1].set_xlabel('Day')
ax[1].set_ylabel('Choice Overlap')
ax[1].set_title('Correct GNG Trials')
ax[1].legend(fontsize=10)

df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
df = df[df.odr_perf==0]
df = df[df.choice==1]

sns.lineplot(data=df, x='day', y='overlaps_TEST_LD', hue='tasks', marker='o', legend=1, palette=[ 'b', 'g'], ax=ax[2])

ax[2].axhline(0., ls='--', color='k')
ax[2].set_xlabel('Day')
ax[2].set_ylabel('Choice Overlap')
ax[2].set_title('Incorrect GNG Trials')
ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/choice_gng_overlaps_LD.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./figures/choice_overlaps/figure_34.png]]

#+begin_src ipython
df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.choice==1]
# df = df[df.mouse!='ACCM03']
# df = df[df.tasks!='DualGo']
sns.lineplot(data=df, x='day', y='overlaps_CHOICE_LD', marker='o', legend=0, color='b')
sns.lineplot(data=df, x='day', y='overlaps_CHOICE_LD', hue='mouse', marker='o', legend=0, alpha=.3, errorbar=None)
plt.ylabel('Choice Overlap')
plt.axhline(0, ls='--', color='k')
plt.show()
#+end_src

#+RESULTS:
[[./figures/choice_overlaps/figure_36.png]]

#+begin_src ipython
import pingouin as pg
df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.choice==1]
# df = df[df.tasks!='DualGo']
aov = pg.rm_anova(dv='overlaps_CHOICE_LD', within=['day', 'tasks'], subject='mouse', data=df, detailed=True)
print(aov)
#+end_src

#+RESULTS:
:         Source        SS  ddof1  ddof2        MS          F     p-unc  \
: 0          day  0.793087      1      8  0.793087   9.525545  0.014972
: 1        tasks  1.945455      2     16  0.972727  11.783137  0.000715
: 2  day * tasks  0.217577      2     16  0.108788   4.627526  0.025952
:
:    p-GG-corr       ng2       eps
: 0   0.014972  0.127516  1.000000
: 1   0.001252  0.263903  0.887749
: 2   0.037722  0.038550  0.790194

 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(2*width, height), sharex=True, sharey=True)

df = df_choice.copy()
df = df[df.laser==0]

# df = df[df.odr_perf==1]
df = df[df.choice==1]
# df = df[df.mouse=='JawsM15']
print(df.day.unique())

epoch= 'CHOICE'

plot_overlaps(df, 'first', epoch, ax[0], title='Choice', y0=0.)
# plot_overlaps(df, 'middle', epoch, ax[1], title='Choice', y0=0.)
plot_overlaps(df, 'last', epoch, ax[1], title='Choice', y0=0.)

ax[0].set_ylabel('Choice Overlap')
# ax[0].set_title('First')
# ax[1].set_title('Middle')
# ax[2].set_title('Last')

# ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/choice_overlaps_%s.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: ['first' 'last']
[[./figures/choice_overlaps/figure_37.png]]
:END:

 #+begin_src ipython
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(2*width, height), sharex=True, sharey=True)

df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.odr_perf==1]
# df = df[df.response=='incorrect_fa']
df = df[df.choice==0]

print(df.mouse.unique(), df.shape)

epoch= 'CHOICE'

plot_overlaps(df, 'first', epoch, ax[0], title='Choice', y0=0.)
# plot_overlaps(df, 'middle', epoch, ax[1], title='Choice', y0=0.)
plot_overlaps(df, 'last', epoch, ax[1], title='Choice', y0=0.)

ax[0].set_ylabel('Choice Overlap')
# ax[0].set_title('First')
# ax[1].set_title('Middle')
# ax[2].set_title('Last')

# ax[2].legend(fontsize=10)

plt.savefig('figures/icrm/choice_overlaps_no_lick_%s.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: ['JawsM01' 'JawsM06' 'JawsM12' 'JawsM15' 'JawsM18' 'ChRM04' 'ChRM23'
:  'ACCM03' 'ACCM04'] (2106, 79)
[[./figures/choice_overlaps/figure_38.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:
: 7bd2ed0e-5891-4690-8f25-2800f603b087

 #+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=n_, ncols=3, figsize=(3*width, n_*height))

df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
# df = df[df.performance==0]
# df = df[df.odr_perf==1]

epoch= 'CHOICE'
colors = ['r', 'b', 'g']
tasks = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    df_ = df[df.tasks==tasks[i]]
    plot_overlaps(df_[(df_.performance==1)], 'first', epoch, ax[0][i], title='Sample', y0=0., ls='-', label='Correct', colors=[colors[i]])
    plot_overlaps(df_[(df_.performance==0)], 'first', epoch, ax[0][i], title='Sample', y0=0.,ls='--', label='Incorrect', colors=[colors[i]])

    plot_overlaps(df_[(df_.performance==1)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='-', label='Correct', colors=[colors[i]])
    plot_overlaps(df_[(df_.performance==0)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='--', label='Incorrect', colors=[colors[i]])

    ax[0][i].set_ylabel('Choice Overlap')
    ax[1][i].set_ylabel('Choice Overlap')
    ax[0][i].set_ylim([-1, 1.25])
    ax[1][i].set_ylim([-1, 1.25])
    ax[0][i].set_xlim([0, 14])
    ax[n_-1][i].set_xlim([0, 14])
    ax[0][i].set_xticks(np.arange(0, 16, 2))
    ax[1][i].set_xticks(np.arange(0, 16, 2))

# ax[2].legend(fontsize=10)
plt.savefig('figures/icrm/choice_overlaps_%s_correct_incorrect.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/choice_overlaps/figure_38.png]]

 #+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=n_, ncols=3, figsize=(3*width, n_*height))

df = df_choice.copy()
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
# df = df[df.performance==0]
# df = df[df.odr_perf==1]

epoch= 'CHOICE'
colors = ['r', 'b', 'g']
tasks = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    df_ = df[df.tasks==tasks[i]]
    plot_overlaps(df_[(df_.choice==1)], 'first', epoch, ax[0][i], title='Sample', y0=0., ls='-', label='Lick', colors=[colors[i]])
    plot_overlaps(df_[(df_.choice==0)], 'first', epoch, ax[0][i], title='Sample', y0=0.,ls='--', label='No Lick', colors=[colors[i]])

    plot_overlaps(df_[(df_.choice==1)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='-', label='Lick', colors=[colors[i]])
    plot_overlaps(df_[(df_.choice==0)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='--', label='No Lick', colors=[colors[i]])

    ax[0][i].set_ylabel('Choice Overlap')
    ax[1][i].set_ylabel('Choice Overlap')
    ax[0][i].set_ylim([-1, 1.25])
    ax[1][i].set_ylim([-1, 1.25])
    ax[0][i].set_xlim([0, 14])
    ax[n_-1][i].set_xlim([0, 14])
    ax[0][i].set_xticks(np.arange(0, 16, 2))
    ax[1][i].set_xticks(np.arange(0, 16, 2))

# ax[2].legend(fontsize=10)
plt.savefig('figures/icrm/choice_overlaps_%s_licks.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/choice_overlaps/figure_41.png]]


 #+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=n_, ncols=3, figsize=(3*width, n_*height))

df = df_choice.copy()
# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
# df = df[df.performance==0]
# df = df[df.odr_perf==1]

epoch= 'CHOICE'
colors = ['r', 'b', 'g']
tasks = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    df_ = df[df.tasks==tasks[i]]
    plot_overlaps(df_[(df_.response=='correct_rej')], 'first', epoch, ax[0][i], title='Sample', y0=0., ls='-', label='CR', colors=[colors[i]])
    plot_overlaps(df_[(df_.response=='incorrect_fa')], 'first', epoch, ax[0][i], title='Sample', y0=0.,ls='--', label='FA', colors=[colors[i]])

    plot_overlaps(df_[(df_.response=='correct_rej')], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='-', label='CR', colors=[colors[i]])
    plot_overlaps(df_[(df_.response=='incorrect_fa')], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='--', label='FA', colors=[colors[i]])

    ax[0][i].set_ylabel('Choice Overlap')
    ax[1][i].set_ylabel('Choice Overlap')
    ax[0][i].set_ylim([-1, 1.25])
    ax[1][i].set_ylim([-1, 1.25])
    ax[0][i].set_xlim([0, 14])
    ax[n_-1][i].set_xlim([0, 14])
    ax[0][i].set_xticks(np.arange(0, 16, 2))
    ax[1][i].set_xticks(np.arange(0, 16, 2))

# ax[2].legend(fontsize=10)
plt.savefig('figures/icrm/choice_overlaps_%s_cr_fa.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/choice_overlaps/figure_42.png]]

 #+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=n_, ncols=3, figsize=(3*width, n_*height))


df = df_choice.copy()
# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
# df = df[df.performance==0]
# df = df[df.odr_perf==1]

epoch= 'CHOICE'
colors = ['r', 'b', 'g']
tasks = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    df_ = df[df.tasks==tasks[i]]
    plot_overlaps(df_[(df_.pair==1)], 'first', epoch, ax[0][i], title='Sample', y0=0., ls='-', label='Pair', colors=[colors[i]])
    plot_overlaps(df_[(df_.pair==0)], 'first', epoch, ax[0][i], title='Sample', y0=0.,ls='--', label='No Pair', colors=[colors[i]])

    plot_overlaps(df_[(df_.pair==1)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='-', label='Pair', colors=[colors[i]])
    plot_overlaps(df_[(df_.pair==0)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='--', label='No Pair', colors=[colors[i]])

    ax[0][i].set_ylabel('Choice Overlap')
    ax[1][i].set_ylabel('Choice Overlap')
    ax[0][i].set_ylim([-1, 1.25])
    ax[1][i].set_ylim([-1, 1.25])
    ax[0][i].set_xlim([0, 14])
    ax[n_-1][i].set_xlim([0, 14])
    ax[0][i].set_xticks(np.arange(0, 16, 2))
    ax[1][i].set_xticks(np.arange(0, 16, 2))

# ax[2].legend(fontsize=10)
plt.savefig('figures/icrm/choice_overlaps_%s_pairs_no_pair.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/choice_overlaps/figure_43.png]]

 #+begin_src ipython
n_ = len(options['days'])
fig, ax = plt.subplots(nrows=n_, ncols=3, figsize=(3*width, n_*height))


df = df_choice.copy()
# Jaws_mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18']
# df = df[df.mouse.isin(Jaws_mice)]
df = df[df.laser==0]
# df = df[df.mouse!='ACCM04']
# df = df[df.performance==0]
# df = df[df.odr_perf==1]

epoch= 'CHOICE'
colors = ['r', 'b', 'g']
tasks = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    df_ = df[df.tasks==tasks[i]]
    plot_overlaps(df_[(df_.performance==1)], 'first', epoch, ax[0][i], title='Sample', y0=0., ls='-', label='Correct', colors=[colors[i]])
    plot_overlaps(df_[(df_.performance==0)], 'first', epoch, ax[0][i], title='Sample', y0=0.,ls='--', label='No Correct', colors=[colors[i]])

    plot_overlaps(df_[(df_.performance==1)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='-', label='Correct', colors=[colors[i]])
    plot_overlaps(df_[(df_.performance==0)], 'last', epoch, ax[n_-1][i], title='Sample', y0=0., ls='--', label='No Correct', colors=[colors[i]])

    ax[0][i].set_ylabel('Choice Overlap')
    ax[1][i].set_ylabel('Choice Overlap')
    ax[0][i].set_ylim([-1, 1.25])
    ax[1][i].set_ylim([-1, 1.25])
    ax[0][i].set_xlim([0, 14])
    ax[n_-1][i].set_xlim([0, 14])
    ax[0][i].set_xticks(np.arange(0, 16, 2))
    ax[1][i].set_xticks(np.arange(0, 16, 2))

# ax[2].legend(fontsize=10)
plt.savefig('figures/icrm/choice_overlaps_%s_corrects_no_correct.svg' % epoch, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/choice_overlaps/figure_44.png]]


#+begin_src ipython

#+end_src

#+RESULTS:

 #+begin_src ipython

#+end_src

#+RESULTS:
: 92e4c242-93a4-45ac-9246-80f36e6eada2

#+begin_src ipython
df = df_choice.copy()
df = df[df.laser==0]

df = df[df.odr_perf==1]
df = df[df.choice==1]

df = df[df.mouse!='ACCM04']
# df = df[df.response=='incorrect_fa']

plot_overlaps_mat(df, 'first', vmin=0, vmax=1, title='Choice')
#+end_src

#+RESULTS:
: 8b86502c-c013-411e-9a04-d2ea4355c848

#+begin_src ipython
df = df_choice.copy()
df = df[df.laser==0]
plot_overlaps_mat(df, 'last', vmin=-0.5, vmax=1, title='Choice')
#+end_src

#+RESULTS:
[[./figures/choice_overlaps/figure_49.png]]

#+begin_src ipython
df = df_choice.copy()
df = df[df.response=='incorrect_fa']
plot_overlaps_mat(df, 'last', vmin=0, vmax=1, title='Choice')
#+end_src

#+RESULTS:
: e3e14a9c-27a6-40db-93a6-73bbe8889c5e

#+begin_src ipython
df = df_choice.copy()
df = df[df.response=='correct_rej']
plot_overlaps_mat(df, 'last', vmin=0, vmax=1, title='Choice')
#+end_src

#+RESULTS:
: e44d1a04-97ef-4497-8a09-cca2e6553506

#+begin_src ipython

#+end_src

#+RESULTS:
: c4eb98d7-7fa0-4a43-9a29-53e57be5001d
