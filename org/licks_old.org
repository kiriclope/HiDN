STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session licks :kernel dual_data

* Notebook Settings

#+begin_src ipython
%load_ext autoreload
%autoreload 2
%reload_ext autoreload

%run /home/leon/dual_task/dual_data/notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/dual_task/dual_data/')

  import pickle as pkl
  import numpy as np
  import matplotlib.pyplot as plt
  from scipy.io import loadmat
  import pandas as pd

  from src.licks.licks import *
#+end_src

#+RESULTS:

#+begin_src ipython
import glob
import os
import warnings
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import pickle as pkl

  def pkl_save(obj, name, path="."):
      os.makedirs(path, exist_ok=True)
      destination = path + "/" + name + ".pkl"
      print("saving to", destination)
      pkl.dump(obj, open(destination, "wb"))


  def pkl_load(name, path="."):
      source = path + "/" + name + '.pkl'
      print('loading from', source)
      return pkl.load(open( source, "rb"))
#+end_src

#+RESULTS:

#+begin_src ipython
def find_mat_files(folder_path):
    mat_files = np.array(glob.glob(os.path.join(folder_path, '*.mat')))
    return mat_files[0]
#+end_src

#+RESULTS:

* Utils

#+begin_src ipython
import matplotlib.pyplot as plt

def licks_raster(trial_licks, stimulus_onsets=None, ax=None, color='k'):

    # trial_licks: list of arrays, as before
    if ax is None:
        fig, ax = plt.subplots()

    for trial_idx, licks_in_trial in enumerate(trial_licks):
        ax.vlines(licks_in_trial, trial_idx + 0., trial_idx + 2.5, color=color)  # vertical lines per lick

    add_vlines2(ax=ax)
    ax.set_xlabel('Time from stimulus onset (s)')
    ax.set_ylabel('Trial')
    ax.set_ylim(0.5, len(trial_licks) + 0.5)
    ax.set_xlim(0, 14)
    #+end_src

#+RESULTS:

#+begin_src ipython
import numpy as np
import matplotlib.pyplot as plt

def licks_hist(trial_licks, stimulus_onsets=None, bin_size=0.25, t_min=0, t_max=14, ax=None, color='k'):
    if ax is None:
        fig, ax = plt.subplots()
    # Bin edges (relative to stimulus onset)
    bins = np.arange(t_min, t_max + bin_size, bin_size)
    bin_centers = (bins[:-1] + bins[1:]) / 2

    # Collect all relative lick times
    all_rel_licks = []
    for i, licks_in_trial in enumerate(trial_licks):
        rel_licks = licks_in_trial # - stimulus_onsets[i]
        # Optionally filter only to within peri-stimulus window:
        rel_licks = rel_licks[(rel_licks >= t_min) & (rel_licks < t_max)]
        all_rel_licks.append(rel_licks)
    all_rel_licks = np.hstack(all_rel_licks)  # combine all trials

    # Histogram and normalize
    counts, _ = np.histogram(all_rel_licks, bins=bins)
    n_trials = len(trial_licks)
    lick_rate = counts / n_trials / bin_size  # rate in Hz

    per_bin_counts = np.zeros(len(bins) - 1)
    per_bin_ntrials = np.zeros(len(bins) - 1)

    for i, licks_in_trial in enumerate(trial_licks):
        rel_licks = licks_in_trial # - stimulus_onsets[i]
        # You might have each trial's duration as trial_durations[i] (if available)
        trial_end = rel_licks.max() if rel_licks.size > 0 else t_max
        # For each bin, check coverage and count licks
        covered = (bins[:-1] >= t_min) & (bins[1:] <= trial_end)
        hist, _ = np.histogram(rel_licks, bins=bins)
        per_bin_counts  += hist
        per_bin_ntrials += covered.astype(float)

        # Prevent divide-by-zero
        mask = per_bin_ntrials > 0
        lick_rate = np.zeros_like(per_bin_counts)
        lick_rate[mask] = per_bin_counts[mask] / per_bin_ntrials[mask] / bin_size

    # Plot
    ax.bar(bin_centers, lick_rate, width=bin_size, align='center', color=color)
    add_vlines2(ax=ax)
    ax.set_xlabel('Time from stimulus onset (s)')
    ax.set_ylabel('Lick rate (Hz)')
#+end_src

#+RESULTS:

* All Mice

#+begin_src ipython
from src.common.options import set_options
path = '/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData'

window_start = 0.0  # seconds after stimulus
window_end   = 8.0   # seconds after stimulus
window_length = window_end - window_start

mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18', 'ChRM04', 'ChRM23', 'ACCM03', 'ACCM04']

options = set_options()

df_mouse = []
for mouse in mice:
    df_day = []
    options['mouse'] = mouse
    options = set_options(**options)

    for day in range(1, options['n_days']+1):
        file_name = path + '/%s-DualTask-BehavioralData' % mouse + '/day_%d/' % day
        print(file_name)
        file = find_mat_files(file_name)

        try:
            data = loadmat(file)

            stimulus_onsets = data['Sample'][:, 0] / 1e3
            licks = data['lickTime'][:, 0] / 1e3

            trial_licks = []
            for i in range(len(stimulus_onsets) - 1):
                start = stimulus_onsets[i]
                end = stimulus_onsets[i + 1]
                mask = (licks >= start) & (licks < end)
                trial_licks.append(licks[mask] - stimulus_onsets[i])

            # For the last trial, include all licks after the last onset:
            last_mask = licks >= stimulus_onsets[-1]
            trial_licks.append(licks[last_mask]-stimulus_onsets[-1])

            avg_lick_rates = []

            for i, licks_in_trial in enumerate(trial_licks):
                # Rel. to onset:
                rel_licks = licks_in_trial # - stimulus_onsets[i]
                # Count licks within [6.5, 7.0) s after onset
                n_licks = np.sum((rel_licks >= window_start) & (rel_licks < window_end))
                # Lick rate = count / window
                rate = n_licks # / window_length  # in Hz
                avg_lick_rates.append(rate)

            avg_lick_rates = np.array(avg_lick_rates)

            trials = data['AllTrials'][0][0][-1]
            col_names = ['sample', 'test', 'outcome', 'pair', 'distractor', 'cue', 'odr_outcome', 'odr_pair', 'laser']
            df = pd.DataFrame(trials, columns=col_names)

            df['licks'] = trial_licks
            df['performance'] = df['outcome'].apply(lambda x: 0 if ((x==2) or (x==3)) else 1)
            df['paired'] = df['outcome'].apply(lambda x: 0 if ((x==4) or (x==3)) else 1)
            df['tasks'] = df['distractor'].apply(
                lambda x: 'DPA' if x == 0 else ('DualGo' if x == 1 else 'DualNoGo')
            )
            df['licks_LD'] = avg_lick_rates
            df['day'] = day
            df_day.append(df)
        except:
            pass

    df_day = pd.concat(df_day).reset_index(drop=True)
    df_day['mouse'] = mouse
    df_mouse.append(df_day)

df_mouse = pd.concat(df_mouse).reset_index(drop=True)
#+end_src

#+RESULTS:
#+begin_example
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM01-DualTask-BehavioralData/day_1/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM01-DualTask-BehavioralData/day_2/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM01-DualTask-BehavioralData/day_3/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM01-DualTask-BehavioralData/day_4/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM06-DualTask-BehavioralData/day_1/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM06-DualTask-BehavioralData/day_2/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM06-DualTask-BehavioralData/day_3/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM06-DualTask-BehavioralData/day_4/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM06-DualTask-BehavioralData/day_5/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM06-DualTask-BehavioralData/day_6/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM12-DualTask-BehavioralData/day_1/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM12-DualTask-BehavioralData/day_2/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM12-DualTask-BehavioralData/day_3/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM12-DualTask-BehavioralData/day_4/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM12-DualTask-BehavioralData/day_5/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM15-DualTask-BehavioralData/day_1/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM15-DualTask-BehavioralData/day_2/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM15-DualTask-BehavioralData/day_3/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM15-DualTask-BehavioralData/day_4/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM15-DualTask-BehavioralData/day_5/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM15-DualTask-BehavioralData/day_6/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM18-DualTask-BehavioralData/day_1/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM18-DualTask-BehavioralData/day_2/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM18-DualTask-BehavioralData/day_3/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM18-DualTask-BehavioralData/day_4/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM18-DualTask-BehavioralData/day_5/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/JawsM18-DualTask-BehavioralData/day_6/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM04-DualTask-BehavioralData/day_1/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM04-DualTask-BehavioralData/day_2/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM04-DualTask-BehavioralData/day_3/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM04-DualTask-BehavioralData/day_4/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM04-DualTask-BehavioralData/day_5/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM04-DualTask-BehavioralData/day_6/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM23-DualTask-BehavioralData/day_1/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM23-DualTask-BehavioralData/day_2/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM23-DualTask-BehavioralData/day_3/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM23-DualTask-BehavioralData/day_4/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ChRM23-DualTask-BehavioralData/day_5/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM03-DualTask-BehavioralData/day_1/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM03-DualTask-BehavioralData/day_2/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM03-DualTask-BehavioralData/day_3/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM03-DualTask-BehavioralData/day_4/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM03-DualTask-BehavioralData/day_5/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM04-DualTask-BehavioralData/day_1/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM04-DualTask-BehavioralData/day_2/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM04-DualTask-BehavioralData/day_3/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM04-DualTask-BehavioralData/day_4/
/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData/ACCM04-DualTask-BehavioralData/day_5/
#+end_example

#+begin_src ipython
pkl_save(df_mouse, 'df_licks', path="../data/mice/")
#+end_src

#+RESULTS:
: saving to ../data/mice//df_licks.pkl

#+begin_src ipython
print(df_mouse.shape)
print(df_mouse.keys())
#+end_src

#+RESULTS:
: (9024, 16)
: Index(['sample', 'test', 'outcome', 'pair', 'distractor', 'cue', 'odr_outcome',
:        'odr_pair', 'laser', 'licks', 'performance', 'paired', 'tasks',
:        'licks_LD', 'day', 'mouse'],
:       dtype='object')

#+begin_src ipython
import statsmodels.api as sm
import statsmodels.formula.api as smf

df_ = df_mouse[df_mouse.laser==0].reset_index(drop=True)
df_ = df_[df_.tasks!='DualGo']

formula = 'performance ~ licks_LD'

model = smf.glm(formula=formula, data=df_, family=sm.families.Binomial())
results = model.fit()

print(results.summary())
#+end_src

#+RESULTS:
#+begin_example
                 Generalized Linear Model Regression Results
==============================================================================
Dep. Variable:            performance   No. Observations:                 3648
Model:                            GLM   Df Residuals:                     3646
Model Family:                Binomial   Df Model:                            1
Link Function:                  Logit   Scale:                          1.0000
Method:                          IRLS   Log-Likelihood:                -1954.7
Date:                Fri, 27 Jun 2025   Deviance:                       3909.5
Time:                        13:07:26   Pearson chi2:                 3.65e+03
No. Iterations:                     4   Pseudo R-squ. (CS):           0.006168
Covariance Type:            nonrobust
==============================================================================
                 coef    std err          z      P>|z|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept      1.3444      0.049     27.316      0.000       1.248       1.441
licks_LD      -0.0871      0.018     -4.830      0.000      -0.122      -0.052
==============================================================================
#+end_example

#+begin_src ipython
import rpy2.robjects as robjects
from rpy2.robjects.packages import importr

# Set the .libPaths in R
custom_r_libpath = '~/R/x86_64-pc-linux-gnu-library/4.3/'
robjects.r('.libPaths("{0}")'.format(custom_r_libpath))

from pymer4.models import Lmer
#+end_src

#+RESULTS:

#+begin_src ipython
df_ = df_mouse.reset_index(drop=True).drop(columns='licks')
df_ = df_[df_.tasks!='DualGo']
df_ = df_[df_.laser==0]
df_ = df_[(df_.outcome==3) | (df_.outcome==4)]

formula = 'performance ~ licks_LD * day + (1 | mouse)'

model = Lmer(formula=formula, data=df_, family='binomial')
results = model.fit()
random_effects = model.ranef

print(results)
#+end_src

#+RESULTS:
#+begin_example
Linear mixed model fit by maximum likelihood  ['lmerMod']
Formula: performance~licks_LD*day+(1|mouse)

Family: binomial	 Inference: parametric

Number of observations: 1824	 Groups: {'mouse': 9.0}

Log-likelihood: -882.096 	 AIC: 1774.192

Random effects:

              Name    Var    Std
mouse  (Intercept)  0.268  0.518

No random effect correlations specified

Fixed effects:

              Estimate  2.5_ci  97.5_ci     SE     OR  OR_2.5_ci  OR_97.5_ci  \
(Intercept)     -0.383  -0.860    0.094  0.243  0.682      0.423       1.098
licks_LD        -0.504  -0.694   -0.314  0.097  0.604      0.500       0.730
day              0.563   0.457    0.668  0.054  1.755      1.580       1.951
licks_LD:day     0.022  -0.037    0.082  0.030  1.022      0.963       1.085

               Prob  Prob_2.5_ci  Prob_97.5_ci  Z-stat  P-val  Sig
(Intercept)   0.405        0.297         0.523  -1.575  0.115
licks_LD      0.377        0.333         0.422  -5.202  0.000  ***
day           0.637        0.612         0.661  10.456  0.000  ***
licks_LD:day  0.506        0.491         0.520   0.731  0.465
#+end_example

#+begin_src ipython
mouse = 'ChRM04'
#+end_src

#+RESULTS:

#+begin_src ipython
fig, ax = plt.subplots(1, 3, figsize=(3*width, height))

df_ = df_mouse[(df_mouse.mouse==mouse) & (df_mouse.tasks=='DPA') & (df_mouse.laser==0)]
licks_raster(df_.licks, ax=ax[0], color='r')

df_ = df_mouse[(df_mouse.mouse==mouse) & (df_mouse.tasks=='DualGo') & (df_mouse.laser==0)]
licks_raster(df_.licks, ax=ax[1], color='b')

df_ = df_mouse[(df_mouse.mouse==mouse) & (df_mouse.tasks=='DualNoGo') & (df_mouse.laser==0)]
licks_raster(df_.licks, ax=ax[2], color='g')

plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/d96b78704a94ed9f616c81ff6a331b0163afd018.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 3, figsize=(3*width, height))

df_ = df_mouse[(df_mouse.tasks=='DPA') & (df_mouse.laser==0)]
# df_ = df_mouse[(df_mouse.mouse==mouse) & (df_mouse.tasks=='DPA') & (df_mouse.laser==0)]
licks_hist(df_.licks, ax=ax[0], color='r')

df_ = df_mouse[(df_mouse.tasks=='DualGo') & (df_mouse.laser==0)]
#df_ = df_mouse[(df_mouse.mouse==mouse) & (df_mouse.tasks=='DualGo') & (df_mouse.laser==0)]
licks_hist(df_.licks, ax=ax[1], color='b')

df_ = df_mouse[(df_mouse.tasks=='DualNoGo') & (df_mouse.laser==0)]
# df_ = df_mouse[(df_mouse.mouse==mouse) & (df_mouse.tasks=='DualNoGo') & (df_mouse.laser==0)]
licks_hist(df_.licks, ax=ax[2], color='g')

plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/0d96ea1acbcc4ab569f448cd638a105b5e9f5d8e.png]]

#+begin_src ipython
from src.decode.bump import decode_bump, circcvl
fig, ax = plt.subplots(1, 3, figsize=(3*width, height))

mouse = 'ChRM23'
size = 32

df_ = df_mouse[(df_mouse.mouse==mouse) & (df_mouse.tasks=='DPA') & (df_mouse.laser==0)].reset_index()
ax[0].plot(circcvl(df_.licks_LD, windowSize=size), color='r')
ax[0].set_xlabel('Trial')
ax[0].set_ylabel('Lick rate (Hz)')


df_ = df_mouse[(df_mouse.mouse==mouse) & (df_mouse.tasks=='DualGo') & (df_mouse.laser==0)].reset_index()
ax[1].plot(circcvl(df_.licks_LD, windowSize=size), color='b')
ax[1].set_xlabel('Trial')
ax[1].set_ylabel('Lick rate (Hz)')

df_ = df_mouse[(df_mouse.mouse==mouse) & (df_mouse.tasks=='DualNoGo') & (df_mouse.laser==0)].reset_index()
ax[2].plot(circcvl(df_.licks_LD, windowSize=size), color='g')
ax[2].set_xlabel('Trial')
ax[2].set_ylabel('Lick rate (Hz)')

plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/8b12d376ff50050ca53f562f5202853ca948439f.png]]

#+begin_src ipython
import seaborn as sns
import matplotlib.pyplot as plt

# Add a 'trial' index per mouse-task group, if not already present
df_mouse['trial'] = df_mouse.groupby(['mouse', 'tasks', 'laser']).cumcount()

df_filtered = df_mouse[df_mouse['laser'] == 0]
df_filtered = df_filtered[df_filtered.mouse!='ACCM04']
df_filtered = df_filtered[df_filtered.mouse!='ACCM03']
# df_filtered = df_filtered[(df_filtered.outcome==3) | (df_filtered.outcome==4)]
# df_filtered = df_filtered[df_filtered.mouse!='ChRM23']

# df_filtered['trial'] = df_filtered.groupby(['mouse', 'tasks']).cumcount()
# print(df_filtered.trial)
tasks_to_plot = ['DPA', 'DualGo', 'DualNoGo']

fig, axes = plt.subplots(1, 3, figsize=(3*width, height))

for i, task in enumerate(tasks_to_plot):
    df_task = df_filtered[df_filtered['tasks'] == task]
    # Plot mean and CI for each trial averaged across mice
    sns.lineplot(
        data=df_task,
        x='trial',
        y=circcvl(df_task['licks_LD'], windowSize=32),
        # y='licks_LD',
        ax=axes[i],
        ci='sd',          # or 'sem', or None for no CI
        estimator='mean', # default is mean
        errorbar='sd',    # newer seaborn
        color=['r','b','g'][i]
    )
    axes[i].set_title(task)
    axes[i].set_xlabel('Trial')
    if i == 0:
        axes[i].set_ylabel('Lick rate before Test (Hz)')

plt.tight_layout()
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/ffc19a8d3c215ffaa6c70a092912b83d612890c1.png]]

#+begin_src ipython

#+end_src

* Behavioral Data

#+begin_src ipython
import glob
import os
import warnings
import numpy as np

# Suppress the "All-NaN slice encountered" RuntimeWarning
warnings.filterwarnings("ignore", category=RuntimeWarning, message="All-NaN slice encountered")


path = '/storage/dual_task/data/2Samples-DualTask-BehavioralData'
cols = ['sample', 'test', 'response', 'pair', 'tasks', 'cue', 'GNG_response', 'GNG_pair', 'laser']
mice = ['JawsM01', 'JawsM06', 'JawsM12', 'JawsM15', 'JawsM18', 'ChRM04', 'ChRM23', 'ACCM03', 'ACCM04']
# mice = ['JawsM15']

df_all = []
for mouse in mice:
    df = []
    print(mouse)
    for day in np.arange(1, 7):

        try:
        # if 1:
            file_name = path + '/%s-DualTask-BehavioralData' % mouse + '/day_%d/' % day
            print(file_name)
            file = find_mat_files(file_name)

            try:
                data = loadmat(file)
            except:
                pass

            licks_dpa, licks_go, licks_nogo, licks_all, labels = get_licks_mouse(data, path, response='', trial_length=14, verbose=0)

            # licks_counts, bin_edges, _ = plt.hist(licks_all[i], bins=84, density=False);

            licks_list = []
            for i in range(licks_all.shape[0]):
                try:
                    licks_counts, bin_edges, _ = plt.hist(licks_all[i], bins=84, density=False);
                    plt.clf()
                    licks_list.append(licks_counts)
                except:
                    licks_list.append(np.array(licks_counts) * np.nan)
                    pass

            df_day = pd.DataFrame({'lick_binned': licks_list, 'lick_times': licks_all.tolist(), 'task': labels})
            df_day['day'] = day

            df.append(df_day)
        except:
            print('file missing', mouse, day)
            pass

    df_days = pd.concat(df)
    df_days['mouse'] = mouse
    df_all.append(df_days)

df_all = pd.concat(df_all)
#+end_src

#+RESULTS:


#+begin_src ipython
print(df_all.mouse.unique())
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: AttributeError                            Traceback (most recent call last)
: Cell In[7], line 1
: ----> 1 print(df_all.mouse.unique())
:
: AttributeError: 'list' object has no attribute 'mouse'
:END:

#+begin_src ipython
print(df_all.shape[0])
#+end_src

#+RESULTS:
: 00755d08-2cca-46dc-b5ae-2d3501ceabd2

#+begin_src ipython
pkl_save(df_all, 'df_licks', path="../data/mice/")
#+end_src

#+RESULTS:
: saving to ../data/mice//df_licks.pkl

* load

#+begin_src ipython
df_all = pkl_load('df_licks', path="../data/mice/")
#+end_src

#+RESULTS:
: loading from ../data/mice//df_licks.pkl

#+begin_src ipython
print(df_all.keys(), df_all.shape)
#+end_src

#+RESULTS:
: Index(['lick_binned', 'lick_times', 'task', 'day', 'mouse'], dtype='object') (4608, 5)

#+begin_src ipython
df_all.lick_times
#+end_src

#+RESULTS:
#+begin_example
0     [8.487, 8.631, 8.745, 9.876, 10.019, 10.289, 1...
1     [4.972000000000001, 5.267000000000003, 5.37700...
2     [4.750999999999991, 7.731999999999999, 8.34699...
3     [5.140000000000015, 7.365000000000009, 7.50800...
4     [5.381999999999977, 5.561999999999983, 5.67699...
                            ...
91    [4.947999999999865, 5.152999999999793, 5.30499...
92    [8.697999999999865, 8.883000000000266, 8.99800...
93    [8.110000000000582, 8.28900000000067, 8.539000...
94    [2.3419999999996435, 2.5600000000004, nan, nan...
95    [5.095999999999549, 5.52599999999984, 5.677999...
Name: lick_times, Length: 4608, dtype: object
#+end_example

#+begin_src ipython
df_ = df_all[df_all.mouse=='ACCM04']
licks = df_['lick_times'].apply(pd.Series).to_numpy()
licks_counts, bin_edges, _ = plt.hist(licks.reshape(-1), bins=84, density=False);
print(licks.shape, licks_counts.shape)
#+end_src

#+RESULTS:
:RESULTS:
: (480, 34) (84,)
[[./.ob-jupyter/559aa2ffdfc99428dcc000f13b972da047847e33.png]]
:END:

#+begin_src ipython
plt.plot(bin_edges[:-1], licks_counts.T)
add_vlines2()
#+end_src

#+RESULTS:
[[./.ob-jupyter/e48ace8b89f67164a759f2110c7a039156a0ce68.png]]

* Single Mouse

#+begin_src ipython
path = '/storage/leon/dual_task/data/2Samples-DualTask-BehavioralData'
mouse = 'ChRM23'
day = 1
file_name = path + '/%s-DualTask-BehavioralData' % mouse + '/day_%d/' % day
file = find_mat_files(file_name)
data = loadmat(file)
#+end_src

#+RESULTS:

#+begin_src ipython
print(data.keys())
#+end_src

#+RESULTS:
: dict_keys(['__header__', '__version__', '__globals__', 'AbolishTrials', 'AllData', 'AllSample', 'AllTest', 'AllTrials', 'Data', 'Data1', 'DataD', 'DataD_GO', 'DataD_NG', 'DataID', 'DataID1', 'DataID2', 'DataID3', 'DataS', 'Delay', 'Delay1', 'FDelay', 'FirstOdor', 'FirstOdor1', 'ITI', 'LDelay', 'LaserPeriod', 'MeantrialLen', 'Odor', 'Odor1', 'ResponseDelay', 'Sample', 'Sample1', 'SampleD', 'SampleD_GO', 'SampleD_NG', 'SampleS', 'SecondOdor', 'SecondOdor1', 'SerialData', 'Test', 'Test1', 'TrialNum', 'TrialNumD', 'TrialNumS', 'Trials', 'Trials1', 'TrialsD', 'TrialsD_GO', 'TrialsD_NG', 'TrialsS', 'Water', 'Water1', 'laserTime', 'lickTime'])

#+begin_src ipython
import numpy as np

# stimulus_onsets: 1D array of stimulus onset times (sorted)
stimulus_onsets = data['Sample'][:, 0] / 1e3
# licks: 1D array of lick timestamps (sorted)
licks = data['lickTime'][:, 0] / 1e3

print(stimulus_onsets.shape, licks.shape)
trial_licks = []
for i in range(len(stimulus_onsets) - 1):
    start = stimulus_onsets[i]
    end = stimulus_onsets[i + 1]
    mask = (licks >= start) & (licks < end)
    trial_licks.append(licks[mask])

# For the last trial, include all licks after the last onset:
last_mask = licks >= stimulus_onsets[-1]
trial_licks.append(licks[last_mask])

# trial_licks is a list; each element is an array of licks for that trial
#+end_src

#+RESULTS:
: (192,) (1521,)

#+begin_src ipython
import matplotlib.pyplot as plt

# trial_licks: list of arrays, as before
plt.figure(figsize=(8, 6))
for trial_idx, licks_in_trial in enumerate(trial_licks):
    # Convert licks to times relative to stimulus onset
    rel_licks = licks_in_trial - stimulus_onsets[trial_idx]
    plt.vlines(rel_licks, trial_idx + 0.5, trial_idx + 1.5)  # vertical lines per lick

add_vlines2()
plt.xlabel('Time from stimulus onset (s)')
plt.ylabel('Trial')
plt.ylim(0.5, len(trial_licks) + 0.5)
plt.xlim(0, 14)
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/4471bfbe4103ffc3fb060de4667e619a611546e2.png]]

#+begin_src ipython
import numpy as np
import matplotlib.pyplot as plt

# Parameters
bin_size = 0.25  # in seconds
t_min = -0.0    # seconds before stimulus
t_max = 14     # seconds after stimulus

# Bin edges (relative to stimulus onset)
bins = np.arange(t_min, t_max + bin_size, bin_size)
bin_centers = (bins[:-1] + bins[1:]) / 2

# Collect all relative lick times
all_rel_licks = []
for i, licks_in_trial in enumerate(trial_licks):
    rel_licks = licks_in_trial - stimulus_onsets[i]
    # Optionally filter only to within peri-stimulus window:
    rel_licks = rel_licks[(rel_licks >= t_min) & (rel_licks < t_max)]
    all_rel_licks.append(rel_licks)
all_rel_licks = np.hstack(all_rel_licks)  # combine all trials

# Histogram and normalize
counts, _ = np.histogram(all_rel_licks, bins=bins)
n_trials = len(trial_licks)
lick_rate = counts / n_trials / bin_size  # rate in Hz

# Plot
plt.bar(bin_centers, lick_rate, width=bin_size, align='center', color='k')
add_vlines2()
plt.xlabel('Time from stimulus onset (s)')
plt.ylabel('Lick rate (Hz)')
# plt.title('Average Lick Rate vs. Time')
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/036220ef5c7a61ce704f028fb118579a711b1482.png]]

#+begin_src ipython
window_start = 6.5   # seconds after stimulus
window_end   = 7.0   # seconds after stimulus
window_length = window_end - window_start

avg_lick_rates = []

for i, licks_in_trial in enumerate(trial_licks):
    # Rel. to onset:
    rel_licks = licks_in_trial - stimulus_onsets[i]
    # Count licks within [6.5, 7.0) s after onset
    n_licks = np.sum((rel_licks >= window_start) & (rel_licks < window_end))
    # Lick rate = count / window
    rate = n_licks / window_length  # in Hz
    avg_lick_rates.append(rate)

avg_lick_rates = np.array(avg_lick_rates)
# avg_lick_rates: one value per trial (Hz)
print(avg_lick_rates.shape)
#+end_src

#+RESULTS:
: (192,)

#+begin_src ipython
df = data['AllTrials'][0][0][-1]
col_names = ['sample', 'test', 'outcome', 'pair', 'distractor', 'cue', 'odr_outcome', 'odr_pair', 'laser']
df = pd.DataFrame(df, columns=col_names)
df['performance'] = df['outcome'].apply(lambda x: 0 if ((x==2) or (x==3)) else 1)
df['paired'] = df['outcome'].apply(lambda x: 0 if ((x==4) or (x==3)) else 1)
df['tasks'] = df['distractor'].apply(
    lambda x: 'DPA' if x == 0 else ('DualGo' if x == 1 else 'DualNoGo')
)
df['licks_LD'] = avg_lick_rates
print(df.keys())
#+end_src

#+RESULTS:
: Index(['sample', 'test', 'outcome', 'pair', 'distractor', 'cue', 'odr_outcome',
:        'odr_pair', 'laser', 'performance', 'paired', 'tasks', 'licks_LD'],
:       dtype='object')

#+begin_src ipython
import statsmodels.api as sm
import statsmodels.formula.api as smf

df_ = df[df.laser==0]

formula = 'performance ~ licks_LD * tasks'

model = smf.glm(formula=formula, data=df_, family=sm.families.Binomial())
results = model.fit()

print(results.summary())
#+end_src

#+RESULTS:
#+begin_example
                 Generalized Linear Model Regression Results
==============================================================================
Dep. Variable:            performance   No. Observations:                   96
Model:                            GLM   Df Residuals:                       90
Model Family:                Binomial   Df Model:                            5
Link Function:                  Logit   Scale:                          1.0000
Method:                          IRLS   Log-Likelihood:                -55.471
Date:                Thu, 26 Jun 2025   Deviance:                       110.94
Time:                        18:27:46   Pearson chi2:                     94.0
No. Iterations:                    19   Pseudo R-squ. (CS):             0.1108
Covariance Type:            nonrobust
==============================================================================================
                                 coef    std err          z      P>|z|      [0.025      0.975]
----------------------------------------------------------------------------------------------
Intercept                      0.4055      0.373      1.088      0.277      -0.325       1.136
tasks[T.DualGo]               -0.2719      0.522     -0.521      0.603      -1.296       0.752
tasks[T.DualNoGo]              1.4663      0.654      2.243      0.025       0.185       2.748
licks_LD                      -0.2027      0.731     -0.277      0.782      -1.636       1.230
licks_LD:tasks[T.DualGo]       5.3109   3134.316      0.002      0.999   -6137.836    6148.458
licks_LD:tasks[T.DualNoGo]    -0.7332      1.052     -0.697      0.486      -2.795       1.329
==============================================================================================
#+end_example

#+begin_src ipython
plt.plot(avg_lick_rates, 'o', ms=6)
plt.xlabel('trial')
plt.ylabel('lick rate (Hz)')
plt.show
#+end_src

#+RESULTS:
:RESULTS:
: <function matplotlib.pyplot.show(close=None, block=None)>
[[./.ob-jupyter/002ad3bb73903c90a7ad16fba0d2840f7422f112.png]]
:END:

#+begin_src ipython
path = 'ACC'
licks_dpa, licks_go, licks_nogo, licks_trial, labels = get_licks_mouse(data, path, response='', trial_length=14, verbose=1)
print(licks_dpa.shape)
licks_all = [np.hstack(licks_dpa), np.hstack(licks_go), np.hstack(licks_nogo)]
print(np.array(licks_trial[0]).shape)
licks_density, bins = plot_licks_hist(licks_all, n_bins=84)
print('lick_density', licks_density.shape)
plt.savefig('licks_first.svg', dpi=300)
#+end_src

#+RESULTS:
:RESULTS:
: licks: all (96, 27) licks: DPA (32, 13) Go (32, 20) NoGo (32, 27)
: (32, 13)
: (27,)
: lick_count (3, 84)
: lick_density (3, 84)
[[./.ob-jupyter/ca95b6484d73ffeec5c850f52bec4e007cd70d9f.png]]
:END:

#+begin_src ipython
print(licks_trial.shape)
licks_counts, bin_edges, _ = plt.hist(np.hstack(licks_trial), bins=84, density=False)
plt.clf()
print(licks_counts.shape)
plt.plot(bin_edges[:-1], licks_counts)
add_vlines2()
#+end_src

#+RESULTS:
:RESULTS:
: (96, 10)
: (84,)
[[./.ob-jupyter/0ddf543d1638c8fd126a19b39085e542535e7320.png]]
:END:

#+begin_src ipython
licks_list = []
for i in range(licks_trial.shape[0]):
    try:
        licks_counts, bin_edges, _ = plt.hist(licks_trial[i], bins=84, density=False);
        licks_list.append(licks_counts.copy())
        licks_counts[licks_counts==0] *= np.nan
        plt.plot(bin_edges[:-1], (i+1)*licks_counts, "|")
    except:
        pass

add_vlines2()
plt.xlabel("Time (s)")
plt.ylabel("Trial #")
plt.xlim(-0.5, 14)
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: /home/leon/mambaforge/envs/dual_data/lib/python3.11/site-packages/matplotlib/axes/_axes.py:6831: RuntimeWarning: All-NaN slice encountered
:   xmin = min(xmin, np.nanmin(xi))
: /home/leon/mambaforge/envs/dual_data/lib/python3.11/site-packages/matplotlib/axes/_axes.py:6832: RuntimeWarning: All-NaN slice encountered
:   xmax = max(xmax, np.nanmax(xi))
[[./.ob-jupyter/a43abedf5fe4910c8853365cf406c071becb8e60.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:
